# LIFULL Accessibility Guidelines

> アクセシビリティに配慮したデザインと実装のためのガイドライン

This file contains accessibility guidelines for designers and developers (HTML version).

## metadata
- url: https://lifull.github.io/accessibility-guidelines/
- version: v3.0

## 目次

- [デザインのガイドライン](#section-design)
  - [ライセンス情報 (レベル1)](#guideline-1-0)
  - [アクセシブルなデザインパターン (レベル1)](#guideline-1-1)
  - [代替テキストの考え方 (レベル1)](#guideline-1-2)
  - [デザイン コンテンツ (レベル1)](#guideline-1-3)
  - [デザイン フォーム・インタラクション (レベル1)](#guideline-1-4)
  - [デザイン ビジュアル (レベル1)](#guideline-1-5)
  - [LIFULL Accessibility Guidelines (レベル1)](#guideline-1-6)
  - [ガイドラインについて はじめに (レベル1)](#guideline-1-7)
  - [画像に適切なalt属性を設定する (レベル1)](#guideline-1-8)
  - [ガイドラインについて 利用方法 (レベル1)](#guideline-1-9)
- [実装のガイドライン](#section-impl)
  - [実装 フォーム (レベル1)](#guideline-1-0)
  - [実装 インタラクション (レベル1)](#guideline-1-1)
  - [実装 マークアップ (レベル1)](#guideline-1-2)

## デザインのガイドライン {#section-design}

### ライセンス情報 (レベル1) {#guideline-1-0}

# ライセンス情報

## ウェブサイトのコンテンツのライセンス

このウェブサイトのコンテンツは、[クリエイティブ・コモンズ 表示 4.0 国際 ライセンス (CC BY 4.0)](https://creativecommons.org/licenses/by/4.0/deed.ja)でライセンスされています。これは、適切なクレジットを表示し、ライセンスへのリンクを提供し、変更があった場合はその旨を示すことを条件に、コンテンツを共有および改変できることを意味します。

ただし、次に挙げるコンテンツは、クリエイティブ・コモンズ ライセンスの適用対象外であり、それぞれの著作権表記またはライセンスに従ってください。

- [代替テキストの考え方](/accessibility-guidelines/alternative-text.html)

## オープンソースソフトウェアのライセンス

このウェブサイトでは、以下のオープンソースソフトウェアを使用しています:

Stimulus

JavaScriptフレームワーク。Stimulusは[MITライセンス](https://opensource.org/licenses/mit)でライセンスされています。ソースコードや詳細情報は、[StimulusのGitHubリポジトリ](https://github.com/hotwired/stimulus)で確認できます。

詳細: [ライセンス情報](https://lifull.github.io/accessibility-guidelines/LICENSE)

### アクセシブルなデザインパターン (レベル1) {#guideline-1-1}

# アクセシブルなデザインパターン

アクセシブルなデザイン・実装方法が確立された定番のデザインパターンを紹介します。ここでのアクセシビリティへの配慮とは、キーボードで操作でき、スクリーンリーダーに UI の役割や状態が十分に伝わることを指しています。

ガイドライン「[定番のパターン](/accessibility-guidelines/design-forms-and-interactions.html#established-pattern)」にあるように、独自の UI を考案しデザインする前に、ここにラインナップされたパターンを利用して目的が達成できるかどうかを検討してください。

利用上の注意

ここにラインナップされたUIを採用する前に、**HTMLのみで実現できるかどうかを検討してください**。たとえばDisclosureパターンには`details`要素が使えます。Spinbuttonパターンには`type="number"`を持つ`input`要素が使えます。

また、**HTMLの要素を本来と違う使い方をすることは避けてください**。たとえば、チェックボックスを領域の開閉に使わないでください。`select`要素をメニュー代わり（ソート順の切り替えなど）に使わないでください。

## パターン集

パターン名

説明

[Accordion (Sections With Show/Hide Functionality)](https://www.w3.org/WAI/ARIA/apg/patterns/accordion/)

アコーディオンは、縦に積み重なったインタラクティブな見出しのセットで、それぞれがコンテンツのセクションを表すタイトル、コンテンツスニペット、サムネイルを含んでいます。

[Alert](https://www.w3.org/WAI/ARIA/apg/patterns/alert/)

アラートは、ユーザーのタスクを中断させることなく、ユーザーの注意を引くような方法で、簡潔で重要なメッセージを表示する要素です。

[Alert and Message Dialogs](https://www.w3.org/WAI/ARIA/apg/patterns/alertdialog/)

アラートダイアログは、重要なメッセージを伝え、応答を得るためにユーザーのワークフローを中断させるモーダルダイアログである。

[Breadcrumb](https://www.w3.org/WAI/ARIA/apg/patterns/breadcrumb/)

パンくずリストとは、現在のページの親ページへのリンクを階層的に並べたものである。

[Button](https://www.w3.org/WAI/ARIA/apg/patterns/button/)

**HTML の button 要素を使用することを強く推奨します**。ボタンは、フォームの送信、ダイアログの表示、アクションのキャンセル、削除など、ユーザーがアクションやイベントを実行できるようにするウィジェットです。

[Carousel (Slide Show or Image Rotator)](https://www.w3.org/WAI/ARIA/apg/patterns/carousel/)

カルーセルは、1 つまたは複数のスライドのサブセットを順次表示することによって、スライドと呼ばれるアイテムのセットを提示します。

[Checkbox](https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/)

WAI-ARIA は、2 種類のチェックボックスウィジェットをサポートしています。デュアルステートでは、ユーザはチェック済みと未チェックという 2 つの選択肢を切り替えられ、トライステートでは、部分チェック済みという第 3 の状態を追加でサポートします。

[Combobox](https://www.w3.org/WAI/ARIA/apg/patterns/combobox/)

コンボボックスは、入力ウィジェットにポップアップがついたもので、ユーザーが可能な値のコレクションからコンボボックスの値を選択することができます。

[Dialog (Modal)](https://www.w3.org/WAI/ARIA/apg/patterns/dialogmodal/)

ダイアログは、プライマリウィンドウまたは他のダイアログウィンドウにオーバーレイ表示されるウィンドウです。

[Disclosure (Show/Hide)](https://www.w3.org/WAI/ARIA/apg/patterns/disclosure/)

ディスクロージャーは、コンテンツを折りたたみ（非表示）または展開（表示）することができるウィジェットです。

[Feed](https://www.w3.org/WAI/ARIA/apg/patterns/feed/)

フィードは、ユーザーがスクロールすると自動的に新しいコンテンツがロードされるページのセクションです。

[Grids : Interactive Tabular Data and Layout Containers](https://www.w3.org/WAI/ARIA/apg/patterns/grid/)

グリッドウィジェットは、矢印キー、ホームキー、エンドキーなどのナビゲーションキーを使って、その中に含まれる情報やインタラクティブな要素を移動できるようにするコンテナです。

[Link](https://www.w3.org/WAI/ARIA/apg/patterns/link/)

**HTML の a 要素を使用することを強く推奨します**。リンクウィジェットは、リソースへのインタラクティブなリファレンスを提供します。

[Listbox](https://www.w3.org/WAI/ARIA/apg/patterns/listbox/)

リストボックスウィジェットは、オプションのリストを表示し、ユーザがそのうちの 1 つまたは複数を選択できるようにします。

[Menu or Menu bar](https://www.w3.org/WAI/ARIA/apg/patterns/menu/)

メニューは、一連のアクションや機能など、ユーザに選択肢のリストを提供するウィジェットです。

[Menu Button](https://www.w3.org/WAI/ARIA/apg/patterns/menubutton/)

メニューボタンは、メニューを開くためのボタンです。

[Meter](https://www.w3.org/WAI/ARIA/apg/patterns/meter/)

メーターは、定義された範囲内で変化する数値のグラフィック表示です。

[Radio Group](https://www.w3.org/WAI/ARIA/apg/patterns/radiobutton/)

ラジオグループ ラジオボタンと呼ばれるチェック可能なボタンのセットで、一度に 1 つ以上のボタンをチェックすることができない。

[Slider](https://www.w3.org/WAI/ARIA/apg/patterns/slider/)

スライダーは、ユーザーがある範囲内の値を選択するための入力です。

[Slider (Multi-Thumb)](https://www.w3.org/WAI/ARIA/apg/patterns/slidertwothumb/)

マルチサムスライダーは、関連する値のグループ内の値をそれぞれ設定する 2 つ以上のサム（親指）を持つスライダーです。

[Spinbutton](https://www.w3.org/WAI/ARIA/apg/patterns/spinbutton/)

スピンボタンは、その値を離散的な値のセットまたは範囲に制限する入力ウィジェットです。

[Switch](https://www.w3.org/WAI/ARIA/apg/patterns/switch/)

スイッチは、ユーザーがオンとオフの 2 つの値から 1 つを選択できる入力ウィジェットです。

[Table](https://www.w3.org/WAI/ARIA/apg/patterns/table/)

**HTML の table 要素を使用することを強く推奨します**。WAI-ARIA のテーブルは、HTML のテーブル要素と同様に、1 つ以上のセルを含む 1 つ以上の行からなる静的な表形式構造で、対話型ウィジェットではありません。

[Tabs](https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/)

タブは、タブパネルと呼ばれるコンテンツのレイヤーセクションのセットで、一度に 1 つのパネルを表示します。

[Toolbar](https://www.w3.org/WAI/ARIA/apg/patterns/toolbar/)

ツールバーは、ボタン、メニューボタン、チェックボックスなどのコントロール群をグループ化するためのコンテナである。

[Tooltip Widget](https://www.w3.org/WAI/ARIA/apg/patterns/tooltip/)

**ツールチップはタッチ端末でのアクセスしにくさがあるため非推奨です**。ツールチップは、キーボードフォーカスが当たったときや、マウスがその要素に重なったときに、その要素に関連する情報を表示するポップアップである。

[Tree View](https://www.w3.org/WAI/ARIA/apg/patterns/treeview/)

ツリービューウィジェットは、階層化されたリストを表示します。

[Treegrid](https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/)

ツリーグリッドウィジェットは、編集可能な表形式の情報からなる階層的なデータグリッドを表示する。

[Window Splitter](https://www.w3.org/WAI/ARIA/apg/patterns/windowsplitter/)

ウィンドウスプリッターは、ウィンドウの 2 つのセクション（ペイン）間の移動可能なセパレータで、ユーザーがペインの相対的なサイズを変更できるようにするものです。

詳細: [アクセシブルなデザインパターン](https://lifull.github.io/accessibility-guidelines/accessible-patterns)

### 代替テキストの考え方 (レベル1) {#guideline-1-2}

# 代替テキストの考え方

この文書は許諾に基づいて[WebAIM: Alternative Text](https://webaim.org/techniques/alttext/)を日本語訳したものです。再利用にあたっては原著を参照してください。

* * *

## はじめに

代替テキストとは、ウェブページの非テキストコンテンツをテキストで置き換えたものです。この記事は[画像](https://webaim.org/techniques/images)に焦点を当てていますが、その原則はマルチメディアや他の非テキストコンテンツにも適用されます。

代替テキストにはいくつかの機能があります。

- スクリーンリーダーは、画像の代わりに代替テキストを表示し、視覚障害や特定の認知障害を持つユーザーが画像の内容や機能を認識できるようにします。

- 画像の読み込みに失敗したり、ユーザーが画像をブロックしている場合、ブラウザは画像の代わりに代替テキストを視覚的に表示します。

- 検索エンジンは代替テキストを利用し、ページの目的と内容の評価に反映させます。

画像に**何が写っているか**を認識する技術は進歩していますが、アルゴリズムだけでは、ページ全体の文脈の中で画像が**何を意味しているか**を理解することはできません。カエデの葉はカナダを表しているのかもしれませんし、単に木の葉を表しているのかもしれません。ウェブページの作者は、画像の**内容**や**機能**を表す代替テキストを提供しなければなりません。

代替テキストの提供には、2つの方法があります。

- ``要素の`alt`属性で指定する。

- 画像の近くにある目に見える本文の中に表示する。または、同等のテキストを簡潔に表示できない場合、代替テキストを別のページに表示し、画像または画像に隣接するテキストリンクからリンクさせることができる。

このように、代替テキストは、`alt`属性だけではありません。

**すべての**画像には、`alt=""`（「空白」の代替テキストと呼ばれることもある）であっても、`alt`属性を付ける必要があります。

## コンテキストがすべて

エレン・オチョアの画像を見てみましょう。

![example image](/accessibility-guidelines/assets/ellen-ochoa.dd470661_ZJh1nn.webp)

この画像は、その使われ方によって、全く異なる代替テキストを必要とする場合があります。

### 例1

![example image](/accessibility-guidelines/assets/ellen-ochoa.dd470661_ZJh1nn.webp)

ヒスパニック系女性として初めて宇宙へ行き、その後、ジョンソン宇宙センターでヒスパニック系初の所長を務めたエレン・オチョアは、ロールモデルとして広く知られています。

例1の画像の`alt`テキストには何を選ぶか？

- `"宇宙飛行士エレン・オチョア"`

- `"宇宙飛行士エレン・オチョアの画像"`

- `"エレン・オチョア、宇宙に行った最初のヒスパニック系女性"`

- 空の`alt`属性 (`alt=""`)

まず、その**内容**と**機能**を考えてみましょう。画像は、リンクされている場合（あるいは``の中に``がある場合）、あるいは``の中にある場合のみ機能を持ちます。この場合、画像は機能を持ちません。

画像の内容を評価し、要約することは、より困難な場合があります。画像の内容が周囲のテキストで表現されている場合は、`alt=""`で十分かもしれません。

上の例では、画像のコンテンツが、これがエレン・オチョアであることをユーザーに伝えています。また、彼女の服装から、彼女が宇宙飛行士であることがわかりますが、これは、彼女の功績を考えると、とても意味のあることです。

**このことから、`alt="宇宙飛行士エレン・オチョア"` をお勧めします。**

“宇宙飛行士エレン・オチョアの画像” は、画像を画像として説明する冗長なものです。

“エレン・オチョア、宇宙に行った最初のヒスパニック系女性” は、画像の一部ではない情報を含み、また本文と冗長になっています。

空の`alt`属性も適切ではありません。本文にエレン・オチョアという名前があっても、視覚ユーザは画像の内容から直接それを知ることができます。したがって、画像は内容を伝えるものであり、空の`alt`属性以上のものが必要です。

### 例2

![example image](/accessibility-guidelines/assets/ellen-ochoa.dd470661_ZJh1nn.webp)

**宇宙飛行士エレン・オチョア**

ヒスパニック系女性として初めて宇宙へ行き、その後、ジョンソン宇宙センターでヒスパニック系初の所長を務めたエレン・オチョアは、ロールモデルとして広く知られています。

例2の画像には、どのような`alt`テキストを選ぶのでしょうか？

- `"画像"`

- `"エレン・オチョア"`

- 空の`alt`属性（alt=""）

**この場合、画像の内容は隣接するテキストで表示されるため、`alt=""`が最適です**。

“エレン・オチョア” は冗長になります。`"画像"`は有用な情報を提供しません。

## 機能的な画像

画像は、コンテンツを提供するだけでなく、ナビゲーションなどの重要な機能を提供するために使われることが多いのです。

### 例3

[![example image](/accessibility-guidelines/assets/ellen-ochoa.dd470661_Z4CHnf.webp)](https://en.wikipedia.org/wiki/Ellen_Ochoa)

**宇宙飛行士エレン・オチョア**

この画像はリンクされている（そしてそのリンク内の唯一のコンテンツである）ことに注意してください。あなたなら、どんな`alt`テキストを選びますか？

- `"もっと読む"`

- `"宇宙飛行士エレン・オチョア"`

- `"宇宙飛行士エレン・オチョアのウィキペディアの項目"`

- 空の`alt`属性（`alt=""`）

画像もリンクである以上、機能があります。**リンク内の**隣接するテキストにはリンクの機能が記述されていないため、画像の`alt`属性で伝える必要があります。

**ですから、`alt="宇宙飛行士エレン・オチョア"`が最適な選択です**。スクリーンリーダーは通常、「リンク、画像、宇宙飛行士エレン・オチョア、宇宙飛行士エレン・オチョア」と読みます。冗長ですが、リンクされた画像の機能を適切に説明するために必要です。特に、スクリーンリーダーのユーザーがリンクでナビゲートする場合など、隣接するテキストから切り離してアクセスする場合は、このような冗長性が必要になります。

“宇宙飛行士エレン・オチョアのウィキペディアの項目”は、画像によって伝達される内容**以外の**内容、つまりリンクがウィキペディアに行くという事実を提供します。

“もっと読む”は、特に文脈から外れていると、十分な情報を提供しません。

空白の`alt`テキストは、ここでは決して適切ではありません。リンクやボタンの中にあるコンテンツが画像**だけ**である場合、スクリーンリーダーが判断する材料は`alt`テキストだけです。テキストが空であったり、欠けていたりすると、スクリーンリーダーは、画像のファイル名やリンク先のページのURLを読み取り、それがユーザーの役に立つことを期待するかもしれませんが、必ずしもそうとは限りません。

次の例のように、画像とテキストのキャプションの両方が1つのリンクに含まれていれば、すべてのユーザーにとってよりアクセスしやすくなります。

[![example image](/accessibility-guidelines/assets/ellen-ochoa.dd470661_Z4CHnf.webp)**宇宙飛行士エレン・オチョア**](https://en.wikipedia.org/wiki/Ellen_Ochoa)

リンクされた画像のコンテンツと機能の両方がリンク内のテキストとして表示されるため、重複を避けるために画像には`alt=""`が付けられます。スクリーンリーダーは、通常、「リンク、宇宙飛行士エレン・オチョア」と読み、先の例よりもはるかに効率的です。

可能な限り、`alt`属性に「…へのリンク」「…へはここをクリック」などを使用するのは避けてください。スクリーンリーダーはすでにリンクをリンクとして読み上げています。

### 例4

[採用応募書類のダウンロード![example image](/accessibility-guidelines/assets/pdf.2d792b60_Z2g8Tpp.webp)](https://webaim.org/techniques/alttext/media/generic_link.htm)

例4のアイコン画像には、どのような`alt`テキストを選択しますか？アイコンはリンクの中にあることに注意してください。

- `"採用応募"`

- `"PDF"`

- `"PDFアイコン"`

- 画像の内容は文脈で示されるため、`alt=""`が適切

**“PDF” が最適です。これはアイコンの内容を伝えるもので、それ以上でも以下でもありません**。

“採用応募 “は冗長になります。機能（“採用応募書類のダウンロード”）はリンクのテキストで示されるので、`alt`属性に再び含める必要はありません。

“PDFアイコン”は、画像がどのようなものかを説明していますが、この文脈では最も適切なものではありません。「アイコン」はここでは冗長です。(このアイコンを別の文脈で使用する場合、それがアイコンであることをユーザーに知らせることが重要な場合があります）。

空の`alt`テキストは、画像が示す重要な情報、つまりリンク先がPDF文書であることを省略してしまいます。

アイコンのみで隣接するテキストなしでリンクする場合、「採用応募書類をPDF形式でダウンロードする」のように、`alt`テキストは、リンクと画像の組み合わせのコンテンツと機能を完全に伝える必要があります。「PDF形式」だけではリンクされたアイコンとして十分ではありません。ページに多くのPDFリンクとアイコンが含まれている場合は特にです。スクリーンリーダーのユーザーがリンクされたアイコンの中を移動すると、「PDF形式、PDF形式、PDF形式…」と聞こえてしまうからです。

## 装飾的な画像

装飾的な画像とは…

- 重要な内容を表示しないもの。

- レイアウトや情報提供以外の目的で使用され

- 機能を持たないもの（例：リンクではない）。

装飾的な画像には、`alt=""`を付けるべきです。

### 例5

![example image](/accessibility-guidelines/assets/separator.e25423c5_Z1GinSP.webp)

例5の水平セパレータ画像には、どのような`alt`テキストを選びますか？

- `"装飾的なライン"`

- `"フッターの始まり"`

- `"セパレーター"`

- `alt=""`

この画像は、ドキュメントのセクション間の区切りを伝えるものですが、すでにテキストで提示されている構造を視覚的に補強しているに過ぎません。

**この画像は追加の内容を伝えるものではないので、`alt=""`が最も適切な選択です。**

### 例6

![example image](/accessibility-guidelines/assets/handshake.29617928_Z1pazze.webp)

私たちのビジネスは、あなたが地球上で見つけることができる最高のサービスを約束します。私たちのチームは、契約交渉のプロセスを通じて優れた顧客サービスを提供するために専門的に訓練されています。

お客様の満足が私たちの最優先事項であり、保証されるか、あるいはお金をお返しします。

例6にある画像の適切な`alt`属性は何でしょうか？

- `"握手"`

- `"契約を完了させるために握手するビジネスマン"`

- `alt=""`

- `"私たちはプロフェッショナルなサービスを保証します"`

**画像は関連する内容や重要な内容を伝えていないため、ここでは空の`alt`テキストが最適です**。考えてみてください。もし画像が削除されたら、重要なコンテンツは失われるでしょうか？この場合、おそらくそうではないでしょう。このような画像の多くは、視覚的に有益なコンテンツを提供していないにもかかわらず、スクリーンリーダーのユーザーに対して無意味で冗長な`alt`テキストを強要しています。

“握手” と “契約を完了させるために握手するビジネスマン” は画像を説明していますが、これは余分な情報です。

“私たちはプロフェッショナルなサービスを保証します” は正しくない。これもウェブでよく見られる間違いです。`alt`を使って、他のどこにも「当てはまらない」余計な情報（または検索エンジン向けの情報）を挿入しているのです。コーダーの論理的根拠は、冗長性を避けることかもしれませんが、なぜそうするのでしょうか。

## 高度な画像

場合によっては、`alt`テキストの決定がより主観的になることがあります。スクリーンリーダーを使用した場合と使用しない場合のユーザーテストは、いくつかのアイデアを生み出すのに役立ちます。

### フォーム画像ボタン

ラスタライズされたテキストを表示するだけのフォーム画像ボタンは、テキストに置き換えられ、CSSでスタイルが設定されるべきです。画像が避けられない場合は、ボタンの機能を説明する`alt`属性が必要です。`alt`テキストは、“検索”, “送信”, “登録”, “注文を確定” などのように、ボタンが作動したときに何をするのかを説明する必要があります。例えば、``は、サイト内検索フォームの画像ボタンとして適切かもしれません。

### イメージ・マップ

クライアント・サイドのイメージ``を使う場合、メイン・イメージの`alt`属性は、イメージ・マップのホット・スポットでは表示されないが、イメージ内に表示される内容を伝えなければなりません。例えば、ニューヨーク州の地図で、各郡の``がある場合、`alt="ニューヨークの郡"`となります。メイン画像が内容を伝えず、主にホットスポットのコンテナである場合、`alt=""`が適切です。

各``は機能を提供するため、同等の`alt`属性を持つ必要があります。ニューヨークの郡のイメージマップの場合、それぞれの``は郡の名前を含むでしょう。

対照的に、**サーバーサイドの**イメージ・マップ（マウス・クリックの座標をサーバーに戻して解釈する）は、スクリーンリーダーが認識できず、キーボードやスクリーンリーダーのユーザーには操作不能です。サーバーサイド・イメージマップは、クライアントサイド・イメージマップに置き換えるべきでしょう。

### CSS画像

CSS画像は、代替テキストを必要としない装飾的な画像のために使用する必要があります。内容を伝える画像は、一般にCSSで定義すべきではありません。ページコンテンツ内に配置する。CSSや他の背景画像に直接代替テキストを追加することはできないため、背景画像が内容を示す場合は、その内容をページマークアップの中でアクセスできるようにする必要があります。上記の例4のPDFアイコン画像をCSSの背景画像で表示した場合、テキスト置換のテクニックを使って、リンク内のコンテンツを表示させることができます。

```
html
採用応募書類のダウンロード (PDF)

```

次に、CSSを使用して、「(PDF)」のテキスト（`span class="pdficon"`要素）を[画面外に](https://webaim.org/techniques/css/invisiblecontent/)配置します。視覚ユーザーにはPDFの背景画像が見え、スクリーンリーダー・ユーザーには画面外の「(PDF)」テキストが聞こえます。

### ロゴ

多くのWebサイトでは、メインブランドのロゴをホームページにリンクしています。画像には、会社名（`alt="Acme Company"`）などの代替テキストを提供すれば、通常は十分でしょう。ロゴ」という言葉（`alt="Acme Company Logo"`）は、通常、画像の内容や機能にとって重要な部分ではありません。同様に、画像がホームページにリンクしていることを示す（`alt="Acme Company home page"`）ことも、通常は必要ありません。なぜなら、これは一般的な慣例だからです。ウェブページの一番上にある「リンク、グラフィック、アクメカンパニー」を聞けば、スクリーンリーダーのユーザーは、それがホームページにリンクしたロゴであると認識すれば十分なのです。

### 複雑な画像

複雑な画像（チャート、グラフ、地図など）の代替案が、簡潔な`alt`属性（おそらく数文の長さ）に収まらない場合、代替テキストを別の場所に提供する必要があります。この場合、同じページ内の隣接するデータテーブルか、画像を掲載しているページからリンクされた別のウェブページになります。リンクは画像に隣接していてもよいし、画像そのものを説明ページにリンクさせてもよい。画像の代替テキストは、その画像の一般的な内容を記述する必要があります。

```
html
販売データを見る

```

#### longdescに関するノート

`longdesc`属性は非推奨で、使用しないでください。これは、長い説明ページへの参照を作成する HTML4 属性でしたが、スクリーンリーダーでは決してうまくサポートされていませんでした。

#### 例7

![example image](/accessibility-guidelines/assets/gw2.a5963484_Z2lXiIS.webp)

この絵では、画家エマニュエル・ロイツェは、光、色、形、遠近法、比率、動きを使って構図を作り上げました。

例7の画像には、どのような`alt`テキストを選ぶのでしょうか？

- `"ジョージ・ワシントン"`

- `"ジョージ・ワシントンの絵画"`

- `"デラウェア川を渡るジョージ・ワシントンの絵画"`

- `"光と色を使って構図を作ることを示した古典的な絵画"`

- `"デラウェア川を渡るジョージ・ワシントンの絵画。渦巻く波が船を取り囲み、そこで威厳あるジョージ・ワシントンは、警戒する軍隊を戦いに導くために、嵐の中から川の向こうの光線を前方に見ている。"`

画像はリンクされていないので、機能はありません。次に、画像の内容が周囲のテキストで表現されているかどうかを判断する必要があります。この場合、そうではありません（少なくとも完全ではありません）。しかし、この画像はもっと難しい。

“ジョージ・ワシントン” はおそらく不適切です。

“ジョージ・ワシントンの絵画” の方が良いのですが、この場合、写真や他の画像タイプとは異なる絵画であることを表現するのは適切ですが、同等と見なすには十分な内容を提供できているとは言えません。

“デラウェア川を渡るジョージ・ワシントンの絵画” は、ユーザーがコンテンツそのものを識別するのに役立つような、より多くの情報を提供しています。代替テキストは、目の見えないユーザーのためだけのものではないことを忘れないでください。多くの目の見えるユーザーは、「ジョージ・ワシントン」だけでは十分な説明になっていないのに対し、この説明を見れば、問題の特定の絵画を識別することができます。

最後の(冗長な)オプションは、主題よりも技法が重要な場合に適切かもしれません。また、絵画の詳細な調査が必要な場合にも適切ですが、このレベルの詳細については、おそらく本文で説明した方がよいでしょう。

**たったひとつの**正しい答えはありません。最適な代替テキストは、画像の文脈と意図された内容によって異なります。

### Figureとfigcaption

``要素は、``と``を含むように設計され、自己充足的 (self-contained) で、典型的には文書の主要な流れから単一のユニットとして参照されます。``は、文書の意味に影響を与えることなく、文書の主要な流れから切り離すことができます。

``は、その含まれる``との意味的な関連付けを作成し、図についての要約や追加情報を提供したり、図を含む文書に関連付けたりすることができます。しかし、``はまだaltテキストを必要とし、冗長性を避けるために、この情報は``を介して伝達されるべきではありません。

## 結論

ウェブアクセシビリティに影響を与える最大の問題の一つであるにもかかわらず、ウェブに代替テキストを実装するための多様で不正確な方法を依然として見続けています。開発コミュニティが同等の代替テキストを完全に受け入れることができれば、ウェブはよりアクセシブルな場所になるはずです。

* * *

_Ellen Ochoa Image Credit: NASA, Public domain, via Wikimedia Commons._

詳細: [代替テキストの考え方](https://lifull.github.io/accessibility-guidelines/alternative-text)

### デザイン コンテンツ (レベル1) {#guideline-1-3}

# デザイン コンテンツ

ウェブページの情報設計やナビゲーション、メディア、文章、文言に関するガイドラインです。企画とデザイナーの両方に関係する内容です。デザイナーがイニシアチブを握り制作を進めてください。

## レベル1 必ず達成

[開く 閉じる]

### [ページタイトル]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#page-title)

#### チェック項目

##### ページのトピックを表す簡潔なテキストをページタイトルにする

##### ページごとに異なるユニークなページタイトルにする

#### 「ページタイトル」とは

**レベル1：必ず達成**

ページタイトルは、ページの主題を表す簡潔なテキストを指定してください。ページタイトルはブラウザのタブに表示され、スクリーンリーダーによって読み上げられます。ページの内容を把握したり、たくさん並んだタブの中から目的のタブを探すための重要な手がかりとしてページタイトルは重要です。

##### 参考情報

- [達成基準 2.4.2: ページタイトルを理解する](https://waic.jp/translations/WCAG21/Understanding/page-titled.html)

### [見出し]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#heading)

#### チェック項目

##### 情報構造を階層化して整理し、セクションの内容を表す簡潔な見出しを付ける

##### 連続した見出しレベル（H1→H2→H3→…）を用いる

##### メインエリアにひとつのH1見出しを設定する

#### 「見出し」とは

**レベル1：必ず達成**

ページの情報構造を見出しを使って整理すると、ユーザーが情報を素早く把握できるようになります。特に、スクリーンリーダーの利用者は見出しを拾い読みすることでページの全体構造を把握しています。

##### 参考情報

- [達成基準 2.4.6: 見出し及びラベルを理解する](https://waic.jp/translations/WCAG21/Understanding/headings-and-labels.html)

- [スクリーンリーダーによる見出しの拾い読みのデモ](https://www.youtube.com/watch?v=fcLpufoZyx8&t=338s)

### [画像の代替テキスト]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#image-alternative)

#### チェック項目

##### 「[代替テキストの考え方](/accessibility-guidelines/alternative-text.html)」のガイドを参考に、代替テキストを指定する

#### 「画像の代替テキスト」とは

**レベル1：必ず達成**

視覚障害者はスクリーンリーダーを通じて代替テキストを合成音声または点字で読むことになります。ネットワーク状況によって画像がうまく読み込まれなかったときにも代替テキストが使われます。代替テキストが不十分だったり指定されていなかったりすると、必要な情報が伝わらなくなってしまいます。

適切な代替テキストは前後の文脈やユーザーに伝えたい情報によって変化します。「[代替テキストの考え方](/accessibility-guidelines/alternative-text.html)」は適切な代替テキストを考えるときに有用なガイドとなっています。

##### 参考情報

- [代替テキストの考え方](/accessibility-guidelines/alternative-text.html)

- [達成基準 1.1.1: 非テキストコンテンツを理解する](https://waic.jp/translations/WCAG21/Understanding/non-text-content.html)

### [動画の字幕]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#video-caption)

#### チェック項目

##### 動画に字幕を提供する（動画に埋め込むまたは、設定で有効化できるようにする）

#### 「動画の字幕」とは

**レベル1：必ず達成**

動画に字幕を付けると、聴覚障害者のみならず、音を出せない環境や状況にあるユーザーにとっても動画を利用しやすくなります。

##### 具体例：字幕付きの動画

![字幕付き動画のイラスト](/accessibility-guidelines/assets/video-caption.6dda9ff4.svg)

*YouTubeに動画をアップロードするYouTubeに動画をアップロードすると自動的に音声が文字起こしされます。生成された字幕をもとに手直しをすると、字幕をつける手間が大幅に省けます。*

##### 参考情報

- [達成基準 1.2.2: キャプション (収録済) を理解する](https://waic.jp/translations/WCAG21/Understanding/captions-prerecorded.html)

- [Making Audio and Video Media Accessible](https://www.w3.org/WAI/media/av/)

- [字幕を追加する - YouTube ヘルプ](https://support.google.com/youtube/answer/2734796?hl=ja)

### [自動再生するコンテンツ]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#autostart-content)

#### チェック項目

##### 動き、点滅、スクロールのあるコンテンツは、以下の条件にすべて当てはまると問題があるため避けるようにする

- 再生が自動的に始まる

- 再生が5秒よりも長く続く

- 他のコンテンツと並行して提示される

- 再生を一時停止、または非表示にする手段がない

##### 定期的に自動更新されるコンテンツは、以下の条件にすべて当てはまると問題があるため避けるようにする

- 自動更新が自動的に始まる

- 他のコンテンツと並行して提示される

- 自動更新を一時停止、または非表示にする手段がない

#### 「自動再生するコンテンツ」とは

**レベル1：必ず達成**

画面内に自動再生するコンテンツがあることで、特定のユーザーがウェブページの利用が困難になることがあります。以下はその一例です。

- 注意欠陥障害をもつユーザーは動き続けるコンテンツに注意を取られ、ページのほかの部分を利用できなくなることがあります。

- 情報の取得に時間がかかる人は、コンテンツを読み終わる前に表示が切り替わってしまうかもしれません。

- コンテンツの変化に伴い、フォーカスがリセットされたり音声が途切れたりすることによって、スクリーンリーダー利用上の妨げになることがあります。

##### 具体例①：自動再生する映像

![/accessibility-guidelines/assets/autostart-content.ea63edcc.svg](/accessibility-guidelines/assets/autostart-content.ea63edcc.svg)

*演出ビデオが背景で動き続けるページにアクセスすると背景で映像が流れ始める。映像の前面にはロゴ、ナビゲーション、テキストが表示されている。目立つ場所に一時停止ボタンが配置されておらず、ユーザーが動きを止めることができない。*

*再生を一時停止できるようにする目立つ場所に一時停止ボタンを配置する。ユーザーは一時停止ボタンを押すことで再生を止めることができる。*

*再生を5秒以内に停止するページにアクセスすると背景で映像が流れるが、映像は5秒以内に終了し再生が止まる。*

##### 具体例②：自動でスライドが切り替わるカルーセル

*一時停止できないページにアクセスするとカルーセルが自動的に再生を始める。目立つ場所に一時停止ボタンが配置されておらず、ユーザーが動きを止めることができない。*

*再生を一時停止できるようにする目立つ場所に一時停止ボタンを配置する。ユーザーは一時停止ボタンを押すことで再生を止めることができる。*

*自動再生しないようにするカルーセルを自動再生しないようにする。*

##### 具体例③：注意喚起のアイコン

*一定周期で動き続けるユーザーの注意を促すためにヘッダーの通知アイコンが定期的に揺れ動く。ヘッダーはページスクロールに追随し常に表示されている。*

*動きを5秒以内に停止するページを読み込むと、ヘッダーの通知アイコンが3回揺れ動き停止する。揺れる動きは5秒以内に停止する。*

##### 参考情報

- [達成基準 2.2.2: 一時停止、停止、非表示を理解する](https://waic.jp/translations/WCAG21/Understanding/pause-stop-hide)

### [閃光]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#flash)

#### チェック項目

##### 閃光を放つコンテンツは避ける

##### 閃光を放つコンテンツは、1秒間に3回より遅く点滅するようにする

##### 1秒間に3回以上点滅する場合は、点滅するコンテンツのサイズを小さくする

#### 「閃光」とは

**レベル1：必ず達成**

閃光を放つ（激しく点滅する）コンテンツは可能な限り避けてください。必要な場合は点滅の速度や色差・面積を小さくする対策を講じてください。

光感受性による発作性障害のある人は、閃光を放つコンテンツによって発作を引き起こす恐れがあります。

##### 参考情報

- [達成基準 2.3.1: 3 回の閃光、又は閾値以下を理解する](https://waic.jp/translations/WCAG21/Understanding/three-flashes-or-below-threshold.html)

## レベル2 可能な限り達成

[開く 閉じる]

### [グラフや図]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#chart-and-diagram)

#### チェック項目

##### グラフの傾向や要点を簡潔にまとめ、テキストや代替テキストで提供する

##### グラフの元データをHTMLの表で提供するか、ダウンロードできるようにする（有用な場合）

##### 図が伝えている情報をテキストや代替テキストで提供する

#### 「グラフや図」とは

**レベル2：可能な限り達成**

グラフや図は多くの情報を効率的に伝えられる表現方法ですが、視覚に偏った表現になりがちなため、視覚による情報取得に制約があるユーザーには情報が伝わりづらいことがあります。

グラフや図は複雑になりすぎないようにしてください。グラフや図に含まれる情報量が、本文または代替テキストが伝える情報量を大きく上回ることのないようにしてください。

グラフの元データを利用できるようにしておくと、データの利用性やアクセシビリティが向上します。

##### 具体例：複雑な概念図

![/accessibility-guidelines/assets/chart-and-diagram.dd180e07.svg](/accessibility-guidelines/assets/chart-and-diagram.dd180e07.svg)

*画像のタイトルのみ指定されている複雑な概念を説明するための図があり、画像のタイトルが代替テキストに設定されている。スクリーンリーダー利用者には画像の内容が伝わらない。*

*複雑な図に具体的な代替テキストを設定する複雑な概念を説明するための図があり、概念の説明をテキスト化したものが代替テキストに設定されている。*

*本文を用いて概念について説明する図が説明している内容を、本文で取り上げる。見出しや箇条書き等を利用しわかりやすく表現する。図はあくまでも補佐的な役割にとどめるようにする。*

##### 参考情報

- [達成基準 1.1.1: 非テキストコンテンツを理解する](https://waic.jp/translations/WCAG21/Understanding/non-text-content.html)

### [データ可視化]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#data-visualization)

#### チェック項目

##### グラフの視覚的要素と凡例を色以外の手段で紐づけられるようにする

#### 「データ可視化」とは

**レベル2：可能な限り達成**

グラフを表現している視覚的要素（点や線・面など）と凡例を、色だけを手掛かりに紐づけていると、ロービジョンや色覚特性のあるユーザーにとって利用しづらくなることがあります。

##### 具体例：凡例付きの円グラフ

![グラフ面と凡例を色で紐づけている例](/accessibility-guidelines/assets/data-visualization.54d8130e.svg)

*グラフ面と凡例を色で紐づけているグラフ面と凡例を色だけを手掛かりに紐づけている。P型色覚での見え方をシミュレーションすると色の判別が困難になる。*

![グラフ面から線を引きラベルを配置している例](/accessibility-guidelines/assets/data-visualization-2.86f9ee0a.svg)

*グラフ面に直接ラベルを配置するグラフ面に直接ラベルを配置することで、色に依存しない必要がなくなる。*

##### 参考情報

- [達成基準 1.4.1: 色の使用を理解する](https://waic.jp/translations/WCAG21/Understanding/use-of-color.html)

### [表]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#table)

#### チェック項目

##### 表は画像ではなくマークアップされるものとしてデザインする

##### 入れ子構造になっている表や、見出しが入り組んでいる表は、より簡潔に表現できないか検討する

#### 「表」とは

**レベル2：可能な限り達成**

表は画像化せず、HTMLをつかってマークアップされるものとしてデザインしてください。

セルの結合を多用した表や1件のデータが複数行にわたる表、入れ子構造になっている表は、理解しやすさやスクリーンリーダーによる利用性が下がります。多くの情報量を表に含めようとせず、いくつかのシンプルな表に分割できないかどうか検討してください。

##### 具体例①：セルの結合のある表

![/accessibility-guidelines/assets/table.7c65dd22.svg](/accessibility-guidelines/assets/table.7c65dd22.svg)

*セルを不必要に結合している*

![/accessibility-guidelines/assets/table-2.c9595b77.svg](/accessibility-guidelines/assets/table-2.c9595b77.svg)

*列を有効活用する*

##### 具体例②：入れ子になった表

![/accessibility-guidelines/assets/table-3.1385971c.svg](/accessibility-guidelines/assets/table-3.1385971c.svg)

*表が入れ子になっている*

![/accessibility-guidelines/assets/table-4.2f06ff46.svg](/accessibility-guidelines/assets/table-4.2f06ff46.svg)

*表を分割する*

##### 参考情報

- [総務省｜報道資料｜統計表における機械判読可能なデータの表記方法の統一ルールの策定](https://www.soumu.go.jp/menu_news/s-news/01toukatsu01_02000186.html)

### [音声のみのコンテンツ]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#audio-only)

#### チェック項目

##### 音声のみコンテンツに、代替コンテンツを提供する

#### 「音声のみのコンテンツ」とは

**レベル2：可能な限り達成**

映像を伴わない音声のみのコンテンツ（例えばポッドキャスト）は、聴覚障害者が利用することができません。書き起こしテキストなどを用いて、音声と同等の情報を含む代替コンテンツを提供してください。

##### 参考情報

- [達成基準 1.2.1: 音声のみ及び映像のみ (収録済) を理解する](https://waic.jp/translations/WCAG21/Understanding/audio-only-and-video-only-prerecorded.html)

### [動画コンテンツ（音声を含む）]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#video-and-audio)

#### チェック項目

##### 動画にキャプションを提供する

##### 動画に音声解説を提供するか、代替コンテンツを提供する

#### 「動画コンテンツ（音声を含む）」とは

**レベル2：可能な限り達成**

音声付きの動画コンテンツは、視覚障害者や聴覚障害者にとって情報取得の障壁になることがあります。

音を出せないユーザーや聴覚障害者は音声から情報を取得できません。会話や音声・音楽に含まれる情報をキャプションとして提供する必要があります。

視覚障害者は映像から情報を取得できません。動画と同等の情報を含む代替コンテンツを提供するか、音声解説を提供する必要があります。

キャプションとは

会話を文字にした字幕（subtitle）に対して、キャプション（caption）は動画の内容を理解するために必要な詳細な情報を含みます。たとえば効果音・音楽・笑い声・話者の特定・位置など。

音声解説とは

主音声のトラックだけでは理解できない重要で視覚的な詳細を説明するために、音声トラックに追加されたナレーション。動作、登場人物、場面の変化、画面上のテキスト、及びその他の視覚的なコンテンツに関する情報など。

##### 参考情報

- [達成基準 1.2.2: キャプション (収録済) を理解する](https://waic.jp/translations/WCAG21/Understanding/captions-prerecorded.html)

- [達成基準 1.2.3: 音声解説、又はメディアに対する代替 (収録済) を理解する](https://waic.jp/translations/WCAG21/Understanding/audio-description-or-media-alternative-prerecorded.html)

- [音声・映像コンテンツのアクセシビリティーを確保する](https://a11y-guidelines.freee.co.jp/explanations/multimedia-content-access.html)

- キャプション・音声解説付き動画の例「[映画『この世界の（さらにいくつもの）片隅に』予告編【日本語字幕･音声ガイド付き】 - YouTube](https://www.youtube.com/watch?v=Qww_dPwArVQ)」

### [テキスト画像]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#image-of-text)

#### チェック項目

##### テキスト画像を使用しない

#### 「テキスト画像」とは

**レベル2：可能な限り達成**

ロービジョンのユーザーはテキストを自分の読みやすい配色に変換する支援技術を使っていることがあります。テキストが画像化されていると、この変換が行われなくなります。ロゴやアプリケーションのスクリーンショットなど、テキストが画像と一体化している場合は例外です。

##### 参考情報

- [達成基準 1.4.5: 文字画像を理解する](https://waic.jp/translations/WCAG21/Understanding/images-of-text.html)

- [Change color contrast in Windows](https://support.microsoft.com/en-us/windows/change-color-contrast-in-windows-fedc744c-90ac-69df-aed5-c8a90125e696)

- [Use color filters in Windows](https://support.microsoft.com/en-us/windows/use-color-filters-in-windows-43893e44-b8b3-2e27-1a29-b0c15ef0e5ce)

## レベル3 できれば考慮

[開く 閉じる]

### [リンクテキスト]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#link-text)

#### チェック項目

##### 「詳細はこちら」「ここをクリック」などのリンクテキストを避ける

##### 新しいタブを開くリンクにはテキストまたはアイコンを添える

##### ファイルの種別を明示する

#### 「リンクテキスト」とは

**レベル3：できれば考慮**

リンクテキストは遷移先のページタイトルにするなど、遷移先が理解しやすいテキストにしてください。「ここをクリック」といったテキストは単体では遷移先が理解できないため、リンクの前後のテキストを読むまで遷移先が不明瞭な状態になります。

また、リンクをクリックしたときに新しいタブが開かれたり、ファイルがダウンロードされたりすることをあらかじめテキストやアイコンを通じてユーザーに知らせるようにしてください。

##### 参考情報

- [達成基準 2.4.4: リンクの目的 (コンテキスト内) を理解する](https://waic.jp/translations/WCAG21/Understanding/link-purpose-in-context.html)

- [G201: 新しいウィンドウを開くときに、利用者へ事前に知らせる](https://waic.jp/translations/WCAG21/Techniques/general/G201)

### [コンテンツの順序]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#order-of-content)

#### チェック項目

##### コンテンツを意味のある順序で並べる

#### 「コンテンツの順序」とは

**レベル3：できれば考慮**

スクリーンリーダーはコーディングされた順番どおりに読み上げます。視覚上の順序とコード上の順序が食い違っていたり、情報のヒエラルキーをうまくコード化できていなかったりすると、スクリーンリーダー利用者が混乱してしまうかもしれません。レイアウトを素直にコード化したときに情報のヒエラルキーが崩れてしまいそうなデザインは避けるか、エンジニアとコミュニケーションをとり意図したとおりに読み上げられるようにしてください。

##### 参考情報

- [達成基準 1.3.2: 意味のある順序を理解する](https://waic.jp/translations/WCAG21/Understanding/meaningful-sequence.html)

### [目次とサイトマップ]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#sitemap)

#### チェック項目

##### 必要に応じて目次とサイトマップを提供する

#### 「目次とサイトマップ」とは

**レベル3：できれば考慮**

目次やサイトマップは、ページやウェブサイト全体がどのような構造になっているかを把握するのに役立ちます。

##### 参考情報

- [達成基準 2.4.5: 複数の手段を理解する](https://waic.jp/translations/WCAG21/Understanding/multiple-ways.html)

詳細: [デザイン コンテンツ](https://lifull.github.io/accessibility-guidelines/design-contents)

### デザイン フォーム・インタラクション (レベル1) {#guideline-1-4}

# デザイン フォーム・インタラクション

ウェブページとユーザーのインタラクションに関するガイドラインです。主としてデザイナーが取り組む内容ですが、内容については企画も把握する必要があります。

## レベル1 必ず達成

[開く 閉じる]

### [定番のパターン]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#established-pattern)

#### チェック項目

##### プレーンなHTMLの組み合わせで目的が達成できるか検討する

##### アクセシビリティが確保された定番のパターンを[アクセシブルなデザインパターン](/accessibility-guidelines/accessible-patterns.html)から探し、目的が達成できるか検討する

#### 「定番のパターン」とは

**レベル1：必ず達成**

HTMLにもともと備わっている要素はすべてアクセシブルになるように作られています。HTMLで賄いきれない場合でも、アクセシビリティ確保の方法論が確立されている定番のデザインパターン（タブ・ダイアログなど）を採用するようにしてください。

##### 参考情報

- [アクセシブルなデザインパターン](/accessibility-guidelines/accessible-patterns.html)

### [キーボード操作]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#keyboard)

#### チェック項目

##### キーボードですべてのコンテンツや機能を利用できるようにする

#### 「キーボード操作」とは

**レベル1：必ず達成**

ポインター操作やタッチ操作が使えない人のために、キーボード操作ですべてのコンテンツや機能を利用できるようにしてください。項目の選択・右クリック・ダブルクリック・ホバー・ホイール・ドラッグ＆ドロップ・タッチジェスチャーなどに依存している操作を見つけ、キーボード操作のみで完結できるようにデザインしてください。

キーボード操作の必要性

通常、ウェブページはキーボードのTabキーやEnterキー、矢印キーを使って操作することができます。細かい操作を苦手とする上肢障害のユーザーはマウスやタッチのようなポインティング操作が使えません。ユーザーが操作できる機能はすべて、マウスやタッチだけでなく、キーボードのみで操作できる必要があります。

##### 参考情報

- [達成基準 2.1.1: キーボードを理解する](https://waic.jp/translations/WCAG21/Understanding/keyboard.html)

### [カスタムUIのキーボード操作]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#keyboard)

#### チェック項目

##### [ARIAのキーボードガイダンス](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/)に従う

##### 妥当なキーボード操作方法についてエキスパートに相談する

#### 「カスタムUIのキーボード操作」とは

**レベル1：必ず達成**

HTMLや既存のデザインパターンでは賄いきれない独自のUIをデザインする場合であっても、基本的なキーボード操作の慣習に従うようにしてください。

##### 参考情報

- [フォーカスの管理およびキーボードナビゲーションのサポート](https://momdo.github.io/wai-aria-1.2/#managingfocus)

- [Developing a Keyboard Interface](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/)

## レベル2 可能な限り達成

[開く 閉じる]

### [ホバーで表示されるコンテンツ]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#content-on-hover)

#### チェック項目

##### 可能なかぎり、ホバーではなく選択でコンテンツを表示する

##### ユーザーによる明示的な閉じるアクションによって閉じるようにする

#### 「ホバーで表示されるコンテンツ」とは

**レベル2：可能な限り達成**

拡大鏡を利用している弱視のユーザーにとって、ポインターホバーで表示されるコンテンツは気づきにくかったり、表示されたコンテンツを読もうとポインターを動かしたとき意図せず閉じてしまうことがあります。ホバーによるコンテンツの表示はできれば避け、明示的な開く・閉じるアクションをトリガーにして表示・非表示をしてください。

##### 具体例：ツールチップ

![「i」アイコンにマウスオーバーしツールチップが表示されているイラスト](/accessibility-guidelines/assets/content-on-hover.d590fdf0.svg)

*マウスオーバーで表示されるツールチップマウスオーバーで表示されるツールチップはタッチ端末からのアクセスが良くない。*

![ツールチップを拡大鏡とともに利用し、ツールチップが画面外に表示されているイラスト](/accessibility-guidelines/assets/content-on-hover-2.ddd3abdf.svg)

*拡大鏡に対応していないツールチップ拡大鏡をつかって画面を大きく拡大しているユーザーは、読みたいテキストが画面外に表示され気づけないことがある。気づけたとしても、ツールチップを読むためにアイコンからマウスカーソルを外すと、ツールチップが閉じてしまうかもしれない。*

##### 参考情報

- [達成基準 1.4.13: ホバー又はフォーカスで表示されるコンテンツを理解する](https://waic.jp/translations/WCAG21/Understanding/content-on-hover-or-focus.html)

### [シンプルなポインター操作]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#simple-pointer)

#### チェック項目

##### タッチジェスチャー・ドラッグ・マウスホイールで操作する機能は、シンプルなポインター操作だけでも利用できるようにする

#### 「シンプルなポインター操作」とは

**レベル2：可能な限り達成**

ピンチ操作やスワイプなどのタッチジェスチャー、ドラッグなどのマウス操作は、運動機能に障害があるユーザーには利用できないかもしれません。マウスホイールなどのデバイス依存の操作は、ユーザーのデバイスが対応していないかもしれません。シングルクリックやダブルクリックなどのシンプルなポインター操作だけでも機能を利用できるようにしてください。

この要件にはページ全体や、`overflow: scroll;`で表現されるスクロール領域のスクロール操作は含まれません。

##### 参考情報

- [達成基準 2.5.1: ポインタのジェスチャを理解する](https://waic.jp/translations/WCAG21/Understanding/pointer-gestures.html)

### [フォームコントロールのラベル]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#form-control-label)

#### チェック項目

##### すべてのフォームコントロールにラベルを設定する

##### フォームコントロールの付近にラベルを表示する

##### ラベルを常に表示する

#### 「フォームコントロールのラベル」とは

**レベル2：可能な限り達成**

ユーザーの入力を受け付ける要素（フォームコントロール）のそばに常に表示されるラベルを配置することは、認知障害や弱視をもつユーザーの助けになります。

##### 具体例：フォームコントロールのラベル

![/accessibility-guidelines/assets/form-control-label.cf6c7665.svg](/accessibility-guidelines/assets/form-control-label.cf6c7665.svg)

*プレースホルダーでラベルを代用する*

![/accessibility-guidelines/assets/form-control-label-2.55d0a43f.svg](/accessibility-guidelines/assets/form-control-label-2.55d0a43f.svg)

*フォームコントロールとラベルが離れている※程度の問題であり、左寄せのラベルを禁止するものではありません。*

![フォームコントロールとラベルのセットの例：テキスト入力欄、チェックボックス、ラジオボタン、トグルボタン](/accessibility-guidelines/assets/form-control-label-3.02927fe1.svg)

*フォームコントロールの付近にラベルを表示する*

##### 参考情報

- [達成基準 2.4.6: 見出し及びラベルを理解する](https://waic.jp/translations/WCAG21/Understanding/headings-and-labels.html)

- [達成基準 3.3.2: ラベル又は説明を理解する](https://waic.jp/translations/WCAG21/Understanding/labels-or-instructions.html)

### [エラーメッセージ]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#error-message)

#### チェック項目

##### エラーの発生箇所と原因を具体的に記述する

##### エラーの修正方法を説明する

#### 「エラーメッセージ」とは

**レベル2：可能な限り達成**

ユーザーの操作によってエラーが発生したとき、エラーについての十分な情報を提示してください。

##### 具体例① エラーの原因を明記する

![エラーメッセージ：ログインできませんでした](/accessibility-guidelines/assets/error-message.6f428045.svg)

*エラーの原因を明記しないなぜログインに失敗したかわからず、ユーザーは修正のためのアクションを起こせない。*

![エラーメッセージ：ユーザー名またはパスワードが間違っています](/accessibility-guidelines/assets/error-message-2.5996a5f8.svg)

*エラーの原因を明記するなぜログインに失敗したかわかり、ユーザーは修正のためのアクションを起こせる。*

##### 具体例② エラーの修正方法を説明する

![エラーメッセージ：ユーザー名を正しい形式で入力してください](/accessibility-guidelines/assets/error-message-3.04fef0f7.svg)

*あいまいな修正指示正しい形式とは何かが不明瞭で、どのように修正すればよいのかわからない。*

![エラーメッセージ：ユーザー名は半角英数で入力してください](/accessibility-guidelines/assets/error-message-4.7939d299.svg)

*具体的で明快な修正指示要求されている形式や文脈の情報を提供することで、正しい値に修正しやすくなる。*

##### 参考情報

- [達成基準 3.3.3: エラー修正の提案を理解する](https://waic.jp/translations/WCAG21/Understanding/error-suggestion.html)

### [エラーメッセージの提示]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#error-presentation)

#### チェック項目

##### エラーメッセージを誰にでも見つけやすいようにする

##### エラー箇所に容易にたどり着けるようにする

#### 「エラーメッセージの提示」とは

**レベル2：可能な限り達成**

視覚障害をもつユーザーは操作箇所から離れた場所に注意喚起が出ても気づかない可能性があります。エラー提示の際にページ遷移を伴う場合、ページの上部に目立つようにエラーメッセージを提示してください。動的にエラーを提示する場合、ポインターやフォーカスの付近にエラーを提示するようにしてください。

##### 気づきやすいエラーメッセージの提示パターン

エラーメッセージを表示するタイミングには大別して2種類があります。エラーを含むHTMLをサーバーサイドから返却するものと、JavaScriptを使用してクライアントサイドで動的に行うものです。晴眼者にとってはあまり違いはありませんが、スクリーンリーダー利用者、拡大鏡利用者にとっての体験は大きく異なります。それぞれでの適切な提示方法について理解することが重要です。

エラーを含むHTMLをサーバーサイドから返却する場合、ページ遷移を伴う点に特徴があります。以下のような点に留意するとよいでしょう。

- エラーはページのできるだけ最初のほうに表示する

- エラー文言から当該箇所にジャンプできるようにする

- ページタイトルに「エラー」の文言を含めることでエラーの存在により気づきやすくなる

クライアントサイドで動的にエラーを表示する場合、ユーザーが注目している場所から離れた場所にエラーを表示しても気づけないことがあります。以下のような点に留意するとよいでしょう。

- 送信ボタンが押されたとき、送信ボタンの付近にエラーを表示する

- または、エラーがあることをアラートダイアログで表示する。OKボタンを押すとエラーのあるフォームコントロールにフォーカスを移動する

- または、エラーが発生した箇所に自動的にフォーカスを移動し、フォームコントロールのすぐそばにエラー文言を表示する

##### 具体例①：エラーを含むHTMLをサーバーサイドから返却する

![フォームのエラー画面のイラスト。画面要素が次の順に並んでいる：①「お問合せ」見出し、②「未入力の必須項目があります：氏名」エラー概要文、③「氏名」ラベル、④「エラー：氏名が入力されていません」エラーメッセージ、⑤氏名入力欄、⑥送信ボタン（アクティブ状態）](/accessibility-guidelines/assets/error-presentaion.84d2e415.svg)

*エラーを含むHTMLをサーバーサイドから返却するエラーをページ上部に表示する。各箇所にもエラーの内容を表示する。ページ上部のエラーをクリックすると各箇所にジャンプできるようになっていると尚よい。*

##### 具体例②：クライアントサイドで動的にエラーを表示する

*送信ボタンを押せなくする送信ボタンのコントラストを落とし押せない状態にしていると、ユーザーは送信ボタンが見つけられなかったり、送信できない理由が理解できないことがある。*

*ボタンから離れた位置にエラーを表示する送信ボタンから離れた位置で起きた変化は気づかれないことがある。*

*送信ボタンの付近にエラーを表示する送信ボタンを常に表示し、送信ボタンが押されたらボタン付近にエラーを表示すると、多くのユーザーがエラーに気づくことができる。*

##### 参考情報

- [達成基準 3.3.1: エラーの特定を理解する](https://waic.jp/translations/WCAG21/Understanding/error-identification.html)

## レベル3 できれば考慮

[開く 閉じる]

### [デバイスの向き]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#device-orientation)

#### チェック項目

##### デバイスの向きを制限しない

##### デバイスの回転なしですべてのコンテンツや機能を利用できるようにする

#### 「デバイスの向き」とは

**レベル3：できれば考慮**

運動機能障害を持つユーザーはデバイスの向きを固定して利用していることがあり、デバイスの向きが制限されたコンテンツや機能は利用できないかもしれません。

##### 参考情報

- [達成基準 1.3.4: 表示の向きを理解する](https://waic.jp/translations/WCAG21/Understanding/orientation.html)

### [新しいタブで開くリンク]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#link-opens-in-new-tab)

#### チェック項目

##### リンクやフォーム送信を同じタブで開く

#### 「新しいタブで開くリンク」とは

**レベル3：できれば考慮**

視覚的なコンテンツを知覚するのに困難を伴うユーザーをはじめとする一部のユーザーにとっては、リンクやフォーム送信を新しいタブで開くことは混乱の原因となりえます。

##### 参考情報

- [達成基準 3.2.1: フォーカス時を理解する](https://waic.jp/translations/WCAG21/Understanding/on-focus.html)

- [達成基準 3.2.5: 要求による変化を理解する](https://waic.jp/translations/WCAG21/Understanding/change-on-request)

- [G200: 必要なときにのみリンク先を新しいウィンドウ及びタブで開く](https://waic.jp/translations/WCAG21/Techniques/general/G200)

### [予測可能なパターン]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#predictable-pattern)

#### チェック項目

##### UIがフォーカスを受取ったときや、フォームコントロール等の値を変更したとき、予測しづらいコンテンツの変化を起こさない

##### コンテンツを変化させるための確定する操作をユーザーにゆだねる

#### 「予測可能なパターン」とは

**レベル3：できれば考慮**

予測しづらいことが起きると、支援技術のユーザーや認知障害を持つユーザーは混乱したり、操作ができなくなることがあります。

##### 具体例：プルダウンメニューによるナビゲーション

![プルダウンメニューの値を変更する操作をしているイラスト](/accessibility-guidelines/assets/predictable-pattern.7f0150e4.svg)

*値を変更するとページ遷移するHTMLのselect要素で実装された並び順選択UIでは、値が変更されるとページ遷移が行われる。値が変更されたタイミングでページ遷移が起きることは予測が難しい。キーボードユーザーは上下キーを使って値をひとつ変えただけでページ遷移してしまうため、目的の項目を選ぶことができない。*

##### 参考情報

- [達成基準 3.2.1: フォーカス時を理解する](https://waic.jp/translations/WCAG21/Understanding/on-focus.html)

- [達成基準 3.2.2: 入力時を理解する](https://waic.jp/translations/WCAG21/Understanding/on-input.html)

### [時間制限]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#time-limit)

#### チェック項目

##### 制限時間を設けない

##### 制限時間が必要な場合、利用者が事前に制限時間を延長・無効化できるようにするか、制限時間を 20 時間以上とする

#### 「時間制限」とは

**レベル3：できれば考慮**

認知障害をもつユーザーやコンテンツの言語に堪能でないユーザーは、コンテンツを利用するのに時間がかかることがあり、設けられた制限時間では足りないかもしれません。リアルタイムイベント等の制限時間を変更することが不可能な理由がある場合を除いて、制限時間は設けないようにしてください。

##### 参考情報

- [達成基準 2.2.1: タイミング調整可能を理解する](https://waic.jp/translations/WCAG21/Understanding/timing-adjustable.html)

### [ユーザー認証]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#user-authentication)

#### チェック項目

##### 認知機能テストによるユーザー認証に代替手段を用意する

#### 「ユーザー認証」とは

**レベル3：できれば考慮**

パズル認証や計算問題、記憶力を試す問題などは、認知障害を持つユーザーには利用できないことがあります。

##### 参考情報

- [Understanding Success Criterion 3.3.7: Accessible Authentication](https://www.w3.org/WAI/WCAG22/Understanding/accessible-authentication)

詳細: [デザイン フォーム・インタラクション](https://lifull.github.io/accessibility-guidelines/design-forms-and-interactions)

### デザイン ビジュアル (レベル1) {#guideline-1-5}

# デザイン ビジュアル

ウェブページの表現＝ビジュアルデザインに関するガイドラインです。

## レベル1 必ず達成

[開く 閉じる]

### [リンクの判別]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#link-identification)

#### チェック項目

##### インラインリンクには下線を引いたり一貫したアイコンを添えたりしてリンクとわかるようにする

#### 「リンクの判別」とは

**レベル1：必ず達成**

本文のような複数行にわたるテキストブロックに含まれるインラインリンクは、リンクとしての手がかりを備えていないと、特にロービジョンや認知障害のあるユーザーは見逃してしまうかもしれません。

##### 具体例：判別できるリンク

![/accessibility-guidelines/assets/link-identification.e2e8cd9b.svg](/accessibility-guidelines/assets/link-identification.e2e8cd9b.svg)

*リンクを示すのに色だけを使用する本文中の一部のテキストがリンクのため青色で表現されている。*

![/accessibility-guidelines/assets/link-identification-2.3291d264.svg](/accessibility-guidelines/assets/link-identification-2.3291d264.svg)

*リンクを示すのに色と下線を使用するリンク色のほか下線をつかってリンクであることが表現されている。*

##### 参考情報

- [達成基準 1.4.11: 非テキストのコントラストを理解する](https://waic.jp/translations/WCAG21/Understanding/non-text-contrast.html)

### [状態の判別]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#state-identification)

#### チェック項目

##### UIが状態を表現するとき、テキストや形状の変化で状態を判別できるようにする

#### 「状態の判別」とは

**レベル1：必ず達成**

フォーカス・選択・ホバー・押下・展開・チェックなど、状態をもつUIコンポーネントは、状態の変化を視覚的に判別できるようにしてください。色に変化を持たせるだけでなく、色以外の手がかり（テキストや形状）を変化させることで状態を表現するようにしてください。ホバーのように状態の変化が装飾的なものであれば、テキストや形状の変化は必要ではありません。

##### 具体例：状態が判別できるUIコンポーネント

![再生アイコンと一時停止アイコン、白抜きと塗りのお気に入りアイコン](/accessibility-guidelines/assets/state-identification.5f2aff60.svg)

*押下状態がアイコンの変化でわかる*

![白抜きのアイコンとチェック付きのアイコン](/accessibility-guidelines/assets/state-identification-2.35f02c3f.svg)

*チェック状態がアイコンの変化でわかる*

![下向きと上向きの矢印アイコン](/accessibility-guidelines/assets/state-identification-3.a055eb19.svg)

*展開状態がアイコンの変化でわかる*

![フォーカスインジケーター無しボタンと有りボタン](/accessibility-guidelines/assets/state-identification-4.b7d664e5.svg)

*フォーカス状態が枠線の変化でわかる*

![タブの並び、最初のタブが塗られている](/accessibility-guidelines/assets/state-identification-5.3ff26f62.svg)

*選択状態が塗りの変化でわかる*

##### 参考情報

- [達成基準 1.4.11: 非テキストのコントラストを理解する](https://waic.jp/translations/WCAG21/Understanding/non-text-contrast.html)

### [フォーカスインジケーター]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#focus-indicator)

#### チェック項目

##### フォーカスインジケーターを除去しない

##### アウトライン型のフォーカスインジケーターは、APCA 45以上の色コントラストを確保する

##### フォーカスインジケーターは十分な太さ(2px以上)である

##### 背景色を用いたフォーカス表現は比較対象となる要素との距離を空けすぎない

#### 「フォーカスインジケーター」とは

**レベル1：必ず達成**

フォーカスインジケーターを非表示にすると、キーボードユーザーや弱視のユーザーはコンテンツや機能を利用できなくなってしまいます。

##### 具体例：視認性に配慮したフォーカスインジケーター

![/accessibility-guidelines/assets/focus-indicator.b1a6c3cc.svg](/accessibility-guidelines/assets/focus-indicator.b1a6c3cc.svg)

*コントラストが低すぎる*

![/accessibility-guidelines/assets/focus-indicator-2.0d43031e.svg](/accessibility-guidelines/assets/focus-indicator-2.0d43031e.svg)

*色の変化のみ*

![/accessibility-guidelines/assets/focus-indicator-3.29c5af76.svg](/accessibility-guidelines/assets/focus-indicator-3.29c5af76.svg)

*十分なコントラストのあるフォーカスインジケーター*

![/accessibility-guidelines/assets/focus-indicator-4.73969380.svg](/accessibility-guidelines/assets/focus-indicator-4.73969380.svg)

*背景色を用いて表現されたフォーカスインジケーター*

##### 参考情報

- [達成基準 2.4.7: フォーカスの可視化を理解する](https://waic.jp/translations/WCAG21/Understanding/focus-visible.html)

- [達成基準 1.4.11: 非テキストのコントラストを理解する](https://waic.jp/translations/WCAG21/Understanding/non-text-contrast.html)

- [達成基準 2.4.13: フォーカスの外観](https://waic.jp/translations/WCAG22/Understanding/focus-appearance.html)

## レベル2 可能な限り達成

[開く 閉じる]

### [テキストの色コントラスト]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#text-contrast)

#### チェック項目

##### 記事本文など読みやすさが重要なテキストは[APCA](https://www.myndex.com/APCA/) 75以上の色コントラストを確保する

##### 記事本文以外の通常のテキストはAPCA 60以上の色コントラストを確保する

##### 見出しなど大きいサイズのテキストはAPCA 45以上の色コントラストを確保する

#### 「テキストの色コントラスト」とは

**レベル2：可能な限り達成**

テキストの読みやすさには色のコントラストが重要です。特にロービジョンのユーザーには十分なコントラストが必要です。

APCAとは

APCA (Accessible Perceptual Contrast Algorithm) は2色のコントラスト比の計算アルゴリズムおよび評価手法です。WCAG 2.1で使われているコントラスト比計算の問題を解消するため開発されました。人間の知覚特性を加味した評価値を算出できることが特徴です。現在パブリックベータ版で、WCAGの次期バージョンにて取り入れられることが検討されています。

LIFULLブランドカラー（#ED6103）について

白背景とLIFULLオレンジの文字色の組み合わせをAPCAでコントラストを計算すると59.7となりAPCA 60を満たしません。これを取りざたして問題視する必要はありません。ただし、文字色はそのままに、白でない色を背景にする場合、コントラストを確保するために文字の色を見直すことを推奨します。

##### 参考情報

- [APCA Contrast Calculator](https://www.myndex.com/APCA/)

### [アイコンやUIコンポーネントの色コントラスト]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#ui-contrast)

#### チェック項目

##### UIコンポーネントやグラフィックが表している情報・機能・状態を判別するために、視覚的要素のどの部分が必要かを特定する

![/accessibility-guidelines/assets/ui-contrast.5cab9d80.svg](/accessibility-guidelines/assets/ui-contrast.5cab9d80.svg)

上記例では、白地`#FFFFFF`に対して`#AAAAAA`(Lc 45.8)、グレー地`#D9D9D9`に対して`#7F7F7F`(Lc 45.1)を確保しています。

##### 必要とされた視覚的要素を、周囲の色に対して[APCA](https://www.myndex.com/APCA/) 45以上の色コントラストを確保する

#### 「アイコンやUIコンポーネントの色コントラスト」とは

**レベル2：可能な限り達成**

フォームコントロールなどのユーザーが操作するUIコンポーネントや、アイコンやグラフなどの情報を持つグラフィックは、情報・機能・状態を判別し操作するために、充分なコントラストが必要です。

ただし、UIコンポーネントがアクティブではないときはコントラストの確保は不要です。

##### 参考情報

- [APCA Contrast Calculator](https://www.myndex.com/APCA/)

- [達成基準 1.4.11: 非テキストのコントラストを理解する](https://waic.jp/translations/WCAG21/Understanding/non-text-contrast.html)

### [ターゲットサイズ]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#target-size)

#### チェック項目

##### リンク、ボタン、フォームコントロール等のポインター操作を受け付けるコンポーネントは、24px四方以上のサイズを確保する

#### 「ターゲットサイズ」とは

**レベル2：可能な限り達成**

小さすぎるターゲットは、タッチ操作するユーザーや細かい操作を苦手とするユーザーにとって使いにくいことがあります。

##### 具体例：ターゲットサイズ

![20pxのターゲットサイズをもつアイコンボタンが2つ間隔なしで並んでいるイラスト](/accessibility-guidelines/assets/target-size.e7608879.svg)

*不十分なターゲットサイズターゲットサイズが24px未満であり、隣接するコンポーネントとの間隔も確保されていない。*

![44pxと24pxのターゲットサイズを持つアイコンボタンが2つずつ間隔なしで並んでいるイラストと、20pxのターゲットサイズを持つアイコンボタンが2つ4pxの間隔で並んでいるイラスト](/accessibility-guidelines/assets/target-size-2.d92eed46.svg)

*十分なターゲットサイズターゲットサイズを24px以上以上とする。ターゲットサイズが24px未満となる場合は、ターゲットサイズと隣接するコンポーネントとの間隔を足し合わせた値が24px以上になるようにする。*

##### 参考情報

- [Understanding Success Criterion 2.5.8: Target Size (Minimum)](https://www.w3.org/WAI/WCAG22/Understanding/target-size-minimum.html)

### [テキストの均等割付]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#text-justify)

#### チェック項目

##### 複数行にわたるテキストを均等割り付けにせず、左寄せもしくは右寄せにする

#### 「テキストの均等割付」とは

**レベル2：可能な限り達成**

特定の認知障害のあるユーザーは、均等割付されたテキストを読むことに苦労することがあります。

##### 具体例：フォームコントロールのラベル

![/accessibility-guidelines/assets/text-justify.518bd008.svg](/accessibility-guidelines/assets/text-justify.518bd008.svg)

*均等割付する*

![/accessibility-guidelines/assets/text-justify-2.bf68e858.svg](/accessibility-guidelines/assets/text-justify-2.bf68e858.svg)

*均等割付しない*

##### 参考情報

- [達成基準 1.4.8: 視覚的提示を理解する](https://waic.jp/translations/WCAG21/Understanding/visual-presentation.html)

### [レスポンシブデザイン]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#responsive-design)

#### チェック項目

##### コンテンツ幅やレイアウトがビューポートの幅に応じるようにレスポンシブデザインを採用する

#### 「レスポンシブデザイン」とは

**レベル2：可能な限り達成**

レスポンシブデザインはブラウザービューポートサイズの変動にレイアウトが応じるため、ズーム時にも横スクロールを必要とせずコンテンツを利用できます。

##### 参考情報

- [達成基準 1.4.10: リフローを理解する](https://waic.jp/translations/WCAG21/Understanding/reflow.html)

詳細: [デザイン ビジュアル](https://lifull.github.io/accessibility-guidelines/design-visual)

### LIFULL Accessibility Guidelines (レベル1) {#guideline-1-6}

# LIFULL Accessibility Guidelines

## ガイドラインについて ![/accessibility-guidelines/assets/intro.3b352b6a.svg](/accessibility-guidelines/assets/intro.3b352b6a.svg)

[### はじめに

LIFULLアクセシビリティガイドラインの概要、特色、項目の見方などを説明しています。](/accessibility-guidelines/introduction.html)

[### 利用方法

LIFULLアクセシビリティガイドラインを効果的に活用する方法を解説します。](/accessibility-guidelines/usage.html)

## デザイン ![/accessibility-guidelines/assets/design.e87aa00b.svg](/accessibility-guidelines/assets/design.e87aa00b.svg)

[### コンテンツ

情報設計やナビゲーション、メディア、文章、文言に関するガイドラインです。](/accessibility-guidelines/design-contents.html)

[### フォーム・インタラクション

フォームデザインおよびインタラクションデザインに関するガイドラインです。](/accessibility-guidelines/design-forms-and-interactions.html)

[### ビジュアル

視覚的なデザインに関するガイドラインです。](/accessibility-guidelines/design-visual.html)

## 実装 ![/accessibility-guidelines/assets/develop.171ce327.svg](/accessibility-guidelines/assets/develop.171ce327.svg)

[### マークアップ

マークアップとスタイリングの実装に関するガイドラインです。](/accessibility-guidelines/impl-markup.html)

[### フォーム

フォームの実装に関するガイドラインです。](/accessibility-guidelines/impl-forms.html)

[### インタラクション

インタラクションの実装に関するガイドラインです。](/accessibility-guidelines/impl-interactions.html)

詳細: [LIFULL Accessibility Guidelines](https://lifull.github.io/accessibility-guidelines/index)

### ガイドラインについて はじめに (レベル1) {#guideline-1-7}

# ガイドラインについて はじめに

LIFULLアクセシビリティガイドラインの概要、特色、項目の見方などを説明しています。

## アクセシビリティとは

アクセシビリティは、プロダクトやサービス、情報、環境が、できるだけ多くの人々にとって利用可能であることを意味します。これには、障害者だけでなく、高齢者や一時的な障害を持つ人、そしてさまざまな状況や環境で利用する人々も含まれます。アクセシビリティを考慮することで、プロダクトやサービスはより幅広いユーザーや状況、環境で使いやすくなります。

## LIFULLアクセシビリティガイドラインとは

LIFULLアクセシビリティガイドラインは、LIFULLの全てのプロダクトやサービスを利用しやすくするために策定されました。LIFULLのプロダクトに関わる全ての人が対象です。ガイドラインを読み、背景を知り、自らの作業に取り入れていただくことを期待しています。

近年、アクセシビリティへの取り組みはより重要になっています。現在、私たちの取り組みは途中段階にありますが、弊社のコーポレートメッセージ「あらゆるLIFEを、FULLに。」を実現するために、アクセシビリティの向上を積極的に目指しています。

### 特徴

LIFULLアクセシビリティガイドラインはいくつかのコンセプトに基づいて編成されています。

#### 工程に応じた項目

自分がやるべきことがわかるよう、ガイドラインの項目は工程（≒職種）ごとに分けられています。

#### 優先度が明確

ガイドラインの項目には優先度を記載し、対応すべき順序を明確にしています。優先度について詳しくは[レベルとは何か？](/accessibility-guidelines/usage.html#%E3%83%AC%E3%83%99%E3%83%AB%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B)を参照してください。

#### わかりやすい記述

初学者でも理解できるように、図表や例を使って具体的に記述しています。ガイドラインが必要とされる背景や、恩恵を受けるユーザーについて記述しています。

#### 関連リソースへのアクセス

理解の促進に役立つリソースや、関連するリソースへのリンクを設けています。

### 各項目の構成

ガイドラインの各項目は次のような構成になっています。

チェック項目

ガイドライン項目が満たされているかどうかを素早く確認するためのチェック項目です。

説明

「〜とは」という見出しから始まるセクションは、ガイドライン項目の説明です。ガイドラインが必要な理由や対象ユーザーについての知識、用語解説などを含みます。

レベル

ガイドライン項目の優先度を示しています。詳しくは[レベルとは何か？](/accessibility-guidelines/usage.html#%E3%83%AC%E3%83%99%E3%83%AB%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B)を参照してください。

具体例

ガイドラインを満たしていない例や満たした場合の具体的な例を紹介しています。

参考情報

ガイドラインの理解を深めるための有用なツールや文書など、外部リソースへのリンクを紹介しています。

## 「障害者」表記について

一般に、「害」という漢字にマイナスイメージがあるとして、「障がい者」や「障碍者」と表記するほうが好ましいとされることがあります。しかし、「障害者」のほうが好ましいとする意見も存在し、人や組織によって意見が分かれています。LIFULLアクセシビリティガイドラインでは、中央省庁の表記に従って「障害者」に統一しています。ただし、表記については会社としての統一見解ではないことをご了承ください。

参考：[「障害」の表記に関する国語分科会の考え方（令和３年３月12日文化審議会国語分科会）](https://www.bunka.go.jp/seisaku/bunkashingikai/kokugo/hokoku/pdf/92880801_03.pdf)

## アクセス解析に伴う情報取得について

当ウェブサイトでは、Google Analyticsを使用してアクセス解析を行っております。Google Analyticsは、ウェブサイト利用状況を収集・分析するためのツールであり、この情報はウェブサイトの改善や利便性の向上に役立てられます。なお、収集されるデータは匿名化されており、特定の個人を識別するものではありません。

収集された情報は、当社のプライバシーポリシーに則り、適切に取り扱われます。詳細については、[Google のサービスを使用するサイトやアプリから収集した情報の Google による使用](https://policies.google.com/technologies/partner-sites?hl=ja)および[当社のプライバシーポリシー](https://lifull.com/privacy/)をご参照ください。

詳細: [ガイドラインについて はじめに](https://lifull.github.io/accessibility-guidelines/introduction)

### 画像に適切なalt属性を設定する (レベル1) {#guideline-1-8}

# 画像に適切なalt属性を設定する (レベル1)

スクリーンリーダーユーザーが画像の内容を理解できるように、意味のある画像には適切なalt属性を設定する必要があります。

## 良い実装例

```

```

## 悪い実装例

```

 
 
 

```

## 注意点

- 装飾的な画像には空のalt属性（alt=""）を設定する

- 情報を伝える画像には具体的な説明をalt属性に設定する

- リンクになっている画像のalt属性はリンクの目的を伝える内容にする

![alt属性の例](example.jpg)

*適切なalt属性の設定例*

## HTML要素リファレンス

以下の要素に注意してください：

img

alt属性

figure

figcaption

詳細: [画像に適切なalt属性を設定する](https://lifull.github.io/accessibility-guidelines/test/sample)

### ガイドラインについて 利用方法 (レベル1) {#guideline-1-9}

# ガイドラインについて 利用方法

LIFULLアクセシビリティガイドラインを効果的に活用する方法を解説します。

## ガイドラインの使い方

LIFULLアクセシビリティガイドラインは、プロダクトやサービスをアクセシブルにするための手引書です。以下の手順でガイドラインを効果的に活用しましょう。

### ガイドラインの活用手順

#### 1\. ガイドライン全体を把握する

まずは、ガイドライン全体をざっと読んで、アクセシビリティに関する基本的な理解を深めましょう。各項目には説明や具体例、参考情報が記載されているので、自分にとって特に関連性の高い部分を重点的に読み進めてください。

#### 2\. 自分の業務に関連する項目を確認する

ガイドラインは工程（≒職種）ごとに大きく分かれています。自分の業務に関連する項目を特定し、それらに重点を置いて理解を深めましょう。また、チーム内で協力してアクセシビリティを向上させるために、他の職種に関する項目も把握しておくと良いでしょう。

#### 3\. 目標とするレベルを決める

レベルはガイドライン項目の優先順位です。「レベルの選び方」を参考にしながら、プロダクトやプロジェクトで目標とするレベルを決定してください。

#### 4\. 目標レベルに従って対応を計画する

各ガイドライン項目には対応するレベルが明記されています。これを参考にして、対応が必要な項目をリストアップし、実施の順序を決めましょう。リソースや状況に応じて、適切な対応策を選んでください。

#### 5\. ガイドラインに沿った改善を実施する

対応が決まったら、具体的な改善を実施しましょう。ガイドラインに記載されている具体例や参考情報を活用しながら、アクセシビリティを向上させていくことが重要です。

#### 6\. 継続的な改善を行う

プロダクトやサービスのアクセシビリティ向上は、一度で完了するものではありません。ユーザーからのフィードバックや自身で気づいた課題をバックログに取り込み、継続的に改善していくことが大切です。

各手順において、社内に在籍する専門家の知識やリソースを活用できます。アクセシビリティ推進グループに積極的に声をかけてみてください。

## レベルについて

### レベルとは何か？

レベルは、ガイドラインの重要度、コスト、LIFULLの制作事情を総合的に判断した、**ガイドライン項目の優先順位**です。

#### レベル1…必ず達成

ユーザーに大きな影響があり、どのサービスでも必ず達成したい重要なタスクです。レベル1に対応できていない場合、特定の状況にあるユーザーが完全にアクセスできない状況が生じることがあります。これはほとんどの場合、「バグ」とみなされるべきものです。

#### レベル2…可能な限り達成

レベル1に次いで重要で、できるだけ達成してほしいタスクです。これにより、より多くのユーザーがコンテンツにアクセスしやすくなります。項目によってはレベル1と同様の重要性を持つこともありますが、対応の難易度やLIFULLでの実情を考慮してレベルを下げている場合があります。

#### レベル3…できれば考慮

できれば考慮してもらいたいタスクです。これにより、WCAGのA, AAの達成基準がおおむねカバーされます。レベル3を達成すると、さらに多くのユーザーにとって使いやすいプロダクトやサービスを実現できます。

### レベルの選び方

プロダクトやプロジェクトごとに目標レベルを設定し、そのレベルに合わせてガイドラインを満たすデザインと実装を行ってください。

選択したレベルに基づいて、原則としてそのレベルで必要とされるガイドライン項目をすべて満たすようにしてください。

#### 既存のプロダクトやサービスへの適用

既存のプロダクトやサービスにLIFULLアクセシビリティガイドラインを適用する場合、以下の「[レベル選びのモデルケース](#%E3%83%AC%E3%83%99%E3%83%AB%E9%81%B8%E3%81%B3%E3%81%AE%E3%83%A2%E3%83%87%E3%83%AB%E3%82%B1%E3%83%BC%E3%82%B9)」から類似ケースを探して参考にしてください。適用時点で既にリリースされている部分に関する問題が多くても心配はいりません。今後の継続的な改善のなかで対応していきましょう。

#### 新規プロダクトやサービスへの適用

新規プロダクトやサービスにLIFULLアクセシビリティガイドラインを適用する場合、下記の「[レベル選びのモデルケース](#%E3%83%AC%E3%83%99%E3%83%AB%E9%81%B8%E3%81%B3%E3%81%AE%E3%83%A2%E3%83%87%E3%83%AB%E3%82%B1%E3%83%BC%E3%82%B9)」から類似ケースを探して参考にしてください。

#### 改修プロジェクトへの適用

プロダクトやサービスレベルで既に目標レベルが設定されている場合は、そのレベルに従ってください。目標がまだ設定されていなくても、UIの追加や改善を含む改修案件がある場合は、以下の「[レベル選びのモデルケース](#%E3%83%AC%E3%83%99%E3%83%AB%E9%81%B8%E3%81%B3%E3%81%AE%E3%83%A2%E3%83%87%E3%83%AB%E3%82%B1%E3%83%BC%E3%82%B9)」から類似ケースを探して参考にしてください。

### レベル選びのモデルケース

注：以下のモデルケースは、考え方を示すための例であり、実際に採用されたものではなく、必ずしも同様の判断を求めるものではありません。

LIFULL HOME'Sのような検索・詳細・問合せを含むカタログ的ウェブサイト

多くのアクセスが見込まれるため、様々なユーザーが利用することが想定されます。テキスト中心の情報検索・閲覧がサービスの核であるため、アクセシビリティへの配慮を妨げる要素はほとんどありません。一方で、企業の基幹サービスであるため、開発の迅速さも重要です。

**総合して、レベル2を目標とします**。レベル3の項目については、容易に実施できるものから取り入れます。

ただし、物件情報はユーザー生成コンテンツであり、画像に適切な代替テキストを用意することは難しいです。クライアントに代替テキストを提供してもらうための仕組みや業界慣習が不十分で、現実的ではありません。そのため、物件情報に関連する画像の代替テキストは対象外とします。

サービスの紹介や問合せ導線を含むプロモーションサイト

情報提供が主な目的のウェブサイトであり、サービス利用に関わる重要な導線です。インタラクティブな要素として問合せフォームがありますが、一般的なメールフォームで、複雑なインタラクションやサーバーサイド機能は必要ありません。サービス説明に動画コンテンツを含む場合、動画字幕作成のノウハウが不足していることが懸念されますが、取り組めば実現可能と考えられます。

**総合して、レベル2を目標とします**。

企業の顔となる静的ウェブサイト（コーポレートサイト、IRサイトなど）

コーポレートサイトやIRサイト、採用サイトは、企業の取り組みが具現化されていると外部から認識される企業の顔です。情報提供が主な目的のウェブサイトであり、複雑なインタラクションやサーバーサイド機能は必要ありません。ブランディングやメッセージを伝えるために、動画やアニメーションによる演出を行いますが、アクセシビリティとの両立は十分可能です。

**総合して、レべル3を目標とします**。現時点で達成できていない項目については、計画的に改善を重ねます。IRサイトや採用サイトで利用している外部サービスのアクセシビリティについては、サービス提供元に改善要望を提案したり、別のサービスへの移行を検討します。

外部委託による読み物系サイト・特集サイト

ほとんど動的な要素がない静的ウェブサイトです。事業部内にデザイナーやエンジニアがいないため、デザイン・実装および記事の執筆は外部委託しています。委託先は特別にアクセシビリティの知識が豊富ではありません。

**総合して、レベル1を目標とします**。デザインや実装のために、アクセシビリティガイドラインのコピーを委託先に送り、遵守を求めます。記事についても、記事コンテンツ向けアクセシビリティガイドラインに沿って執筆するよう求めます。デザインや実装のレビューや受入テストについては、アクセシビリティ推進グループに相談し進め方を確認します。

VR/ARを活用した先進的なプロジェクト

VR/ARを用いて、業界内であまり例のない実験的なインタラクションを実現するプロジェクトです。実験的な要素が強く、普遍的な価値向上よりも、話題性や革新性をアピールすることが重要です。VR/ARによる空間的な体験の代替コンテンツ作成は、試行錯誤の末にできるかどうか微妙であり、プロジェクトの中で研究開発して提供することは現実的ではありません。

**総合して、目標とするレベルは定めません**。

MVPによる検証フェーズのプロダクト

プロダクトが問題を解決するかどうか、市場がプロダクトを受け入れるかどうかを迅速に検証することが最も重要なプロジェクトです。プロダクトが提供できる根本的な価値を評価することが目的であり、ユーザビリティやアクセシビリティは二の次になることが共通認識となっています。

**総合して、目標とするレベルは定めません**。ただし、検証フェーズが終了しプロダクトが成功した場合、アクセシビリティを向上させるための改善計画を立てるものとします。

## フィードバックの方法

誤字脱字や内容の妥当性、わかりやすさや事例の推薦など、さまざまな観点からのフィードバックを歓迎しています。フィードバックを送るには、[GitHubリポジトリ](https://github.com/lifull/accessibility-guidelines)に起票してください。

詳細: [ガイドラインについて 利用方法](https://lifull.github.io/accessibility-guidelines/usage)

## 実装のガイドライン {#section-impl}

### 実装 フォーム (レベル1) {#guideline-1-0}

# 実装 フォーム

フォームの実装に関するガイドラインです。

## レベル1 必ず達成

[開く 閉じる]

### [フォームコントロールのラベル]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#label-for-control)

#### チェック項目

##### `label`要素をつかってフォームコントロールとラベルを関連付ける

#### 「フォームコントロールのラベル」とは

**レベル1：必ず達成**

テキスト入力欄やチェックボックス、`select`要素など、HTMLに定義されているユーザーの入力を受け付ける要素（フォームコントロール）は全て名前を持つ必要があります。名前は、スクリーンリーダー利用者がフォームコントロールにフォーカスを合わせたときに読み上げられます。

`label`要素を使うと、フォームコントロールに名前を付けられると同時にクリックやタップで選択できる範囲が広がるため、ユーザビリティ面にもメリットがあります。

##### 具体例①：テキスト入力欄

*ラベルとテキスト入力欄を一つのlabel要素に含めるラベルと入力欄をlabel要素で囲むと、入力欄の名前が「お名前」に設定されます。*

*テキスト入力欄にidを付与し、label要素のfor属性で参照するテキスト入力欄にidを付与し、label要素のfor属性で参照することで、入力欄の名前が「お名前」に設定されます。ラベルとコントロールを隣同士に置けない場合などに便利です。*

##### 具体例②：チェックボックス

*チェックボックスとラベルを一つのlabel要素に含めるチェックボックスラベルをlabel要素で囲むと、チェックボックスの名前が「メールを受取る」に設定されます。*

*チェックボックスにidを付与し、label要素のfor属性で参照するチェックボックスにidを付与し、label要素のfor属性で参照することで、チェックボックスの名前が「メールを受取る」に設定されます。ラベルとコントロールを隣同士に置けない場合などに便利です。*

### [ラベルのないコントロール]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#labelless-control)

#### チェック項目

##### コントロールにラベルがなく、資料に名前の指定もない場合、名前の案を考え、コンテンツオーナーと認識をそろえる

##### `aria-labelledby`属性もしくは`aria-label`属性をつかってフォームコントロールに名前を指定する

#### 「ラベルのないコントロール」とは

**レベル1：必ず達成**

デザイン上の理由でフォームコントロールのラベルが画面上から省略されている場合でも、フォームコントロールは名前を持つ必要があります。

ラベルのないコントロールに名前を付ける方法は2通りあります。`aria-labelledby`を使うと、ページ中の任意の要素のテキストをコントロールの名前として使用できます。`aria-label`属性はコントロールに直接名前を指定できます。

`aria-labelledby`属性を優先して使用するようにしてください。`aria-label`属性は利用状況によってはうまく機能しません。たとえばウェブページを機械翻訳にかけたときに翻訳されない場合があります。

##### 具体例：ラベルのない検索フィールド

*aria-labelledby属性を使用するコントロールにaria-labelledby属性を付与し、コントロールの名前を含む要素（不可視でも構わない）のidを指定する。*

*aria-label属性を使用するaria-label属性を使用し、コントロールに名前を直接指定する。*

## レベル2 可能な限り達成

[開く 閉じる]

### [入力目的の特定]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#identify-input-purpose)

#### チェック項目

##### `type`属性と`autocomplete`属性を指定する

##### 数字キーボードを表示するために`inputmode`属性を使用する

#### 「入力目的の特定」とは

**レベル2：可能な限り達成**

`input`要素の`type`属性や`autocomplete`属性を使用して入力フィールドの目的を特定しておくと、目的に応じたソフトウェアキーボードが表示されたり、ブラウザーに保存された値の補完機能を利用できるようになったりします。

補完機能を提供することで、入力時にかかる認知負荷を下げることができます。ログイン画面の入力項目のような記憶を要する場所に設定することは特に重要です。

##### 具体例①：クレジットカード番号の入力欄

*数字キーボードを表示するためにtype="number"を用いる数字キーボードを表示する目的のためにtype="number"やtype="tel"を用いるのは誤り。*

*補完種別を指定するためにautocomplete属性を用いる。*

*入力方式を指定するためにinputmodeを用いる。*

##### 参考情報

- [Understanding Success Criterion 3.3.8: Accessible Authentication](https://www.w3.org/WAI/WCAG22/Understanding/accessible-authentication-minimum.html)

- [Understanding Success Criterion 3.3.9: Accessible Authentication](https://www.w3.org/WAI/WCAG22/Understanding/accessible-authentication-enhanced.html)

### [フォームコントロールのグループ化]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#grouped-form-control)

#### チェック項目

##### フォームコントロールをグルーピングするために`fieldset`要素を使用する

#### 「フォームコントロールのグループ化」とは

**レベル2：可能な限り達成**

意味的にまとまりのある複数のフォームコントロールがある場合、それらをグループとしてマークアップしてください。スクリーンリーダーで当該フォームコントロールを操作するとき、所属するグループの名前も同時に読み上げられるようになり、文脈への理解が進みます。

##### 具体例：性別の回答欄

*fieldset要素で選択肢を囲う。*

### [コピー＆ペーストの許容]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#allow-copy-paste)

#### チェック項目

##### コピー＆ペーストを禁止しない

#### 「コピー＆ペーストの許容」とは

**レベル2：可能な限り達成**

特定の認知障害を持つユーザーは、ユーザー名とパスワードの記憶に苦労することがあるため、コピー＆ペーストが禁止されているログインフォームなどが利用できないことがあります。

##### 参考情報

- [Understanding Success Criterion 3.3.8: Accessible Authentication](https://www.w3.org/WAI/WCAG22/Understanding/accessible-authentication-minimum.html)

- [Understanding Success Criterion 3.3.9: Accessible Authentication](https://www.w3.org/WAI/WCAG22/Understanding/accessible-authentication-enhanced.html)

## レベル3 できれば考慮

[開く 閉じる]

### [フォームコントロールの説明文]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#form-control-description)

#### チェック項目

##### `aria-describedby`属性をつかってフォームコントロールに説明文を指定する

#### 「フォームコントロールの説明文」とは

**レベル3：できれば考慮**

フォームコントロールと説明文をプログラムが解釈できるように紐づけると、スクリーンリーダー利用者は、フォーカスをフォームコントロールから移動することなく説明の内容を取得できるようになります。

##### 具体例①：フォームコントロールの説明文

*aria-describedby属性をつかってコントロールと説明文を紐づける*

##### 具体例②：フォームコントロールのエラー

*aria-describedby属性をつかってコントロールとエラーメッセージを紐づける複数のid値をスペース区切りで指定することで、複数の要素にまたがる説明文およびエラーメッセージをコントロールに紐づけられる。*

詳細: [実装 フォーム](https://lifull.github.io/accessibility-guidelines/impl-forms)

### 実装 インタラクション (レベル1) {#guideline-1-1}

# 実装 インタラクション

インタラクションの実装に関するガイドラインです。

## レベル1 必ず達成

[開く 閉じる]

### [ボタンの使用]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#use-button)

#### チェック項目

##### トリガーとなるコンポーネントを`button`要素でマークアップする

#### 「ボタンの使用」とは

**レベル1：必ず達成**

ユーザーのクリックやタップを起点にしてインタラクションが発生する場合、他に適切な要素がなければ、トリガーの要素には`button`要素を使用してください。

`button`要素はデフォルトでキーボードフォーカスを受け取り、スペースバーを含むキーボード操作によってクリックイベントを発生させることができます。`a`要素や`span`要素にJavaScriptでこれらの挙動を模倣して作るのは実装面・テスト面で大きなコストになりえます。

##### ヒント：ボタンが持つデフォルトスタイルをリセットする

```

button {
 margin: 0;
 padding: 0;
 color: inherit;
 background: none;
 font-size: 100%;
 line-height: inherit;
 font-family: inherit;
 font-weight: inherit;
 text-transform: none;
}

```

### [挿入されるコンテンツ]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#inserted-content)

#### チェック項目

##### 動的に追加・表示されるコンテンツのDOMノードをトリガーの直後に配置する

#### 「挿入されるコンテンツ」とは

**レベル1：必ず達成**

サブメニューやモーダルダイアログ、ディスクロージャー、「もっと見る」による追加読み込みなど、コンテンツが動的に追加・表示されるUIについて、そのコンテンツのDOMノードは操作の起点（トリガー）の直後になるようにしてください。トリガーの直後にコンテンツが挿入されることで、キーボードやスクリーンリーダーを使用したときに、トリガーの操作後に自然な流れで操作や読み上げを続けることができます。

JavaScriptによってフォーカス位置を制御できる場合、このガイドラインは必須ではありません。

### [フォーカスインジケーター]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#focus-indicator)

#### チェック項目

##### フォーカスインジケーターを非表示にしない

##### フォーカスインジケーターを抑制するために`HTMLElement.blur()`を用いない

##### フォーカスを受け取ったUIが他の要素によって完全に隠されてはいけない

#### 「フォーカスインジケーター」とは

**レベル1：必ず達成**

フォーカスインジケーターが不可視にされていると、キーボードユーザーはフォーカスの現在位置がわからず、操作を続けることができなくなってしまいます。

また、フォーカスインジケーターを取り除くために`HTMLElement.blur()`を使用すると、フォーカス位置が失われ、キーボード操作を再度先頭からやり直さなければいけなくなってしまうかもしれません。

##### ヒント：キーボード操作時だけフォーカスのスタイルを適用する

`:focus`疑似クラスを使用すると、マウスやタッチ操作で選択したときにもスタイルが適用されます。キーボード操作時のみスタイルを適用したい場合、かわりに`:focus-visible`疑似クラスを使用します。

##### ヒント：フォーカスを受け取ったUIが追従コンテンツによって隠されないようにする

ページをTabキーで下に移動すると、フォーカスの当たった要素が表示領域に収まるようにスクロールを伴いますが、追従ヘッダ等がある場合、それによってフォーカスされたUIが隠れてしまうケースがあります。このような場合、`scroll-padding`プロパティを設定することで要素の重なりを回避することができます。

##### ヒント：Cookieの利用同意を求めるモーダルダイアログにフォーカスを移動する

Cookie利用同意のポップアップはしばしばダイアログとして実装され、ページの読み込み後すぐに表示されます。 このダイアログを背面と対話可能なモードレスダイアログとして実装すると、背面のUIがダイアログに完全に隠され、操作が困難になる可能性があります。この問題を回避するため、ダイアログはモーダルとして実装し、閉じるまでフォーカスが外側のコンテンツに移動しないようにすることが推奨されます。

### [ズームの許容]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#allow-zoom)

#### チェック項目

##### `viewport`メタデータに`user-scalable=no`や`maximum-scale`を指定しない

#### 「ズームの許容」とは

**レベル1：必ず達成**

ロービジョンのユーザーを含む一部のユーザーにとっては、画面を任意の大きさにズームして表示できることは極めて重要です。そのような人にとって、ウェブサイトがズームを禁止しているとウェブサイトを利用できなくなることがあります。ズームされると大多数のユーザーに致命的な問題が起きない限り、ズームを許容してください。

##### ヒント：入力フィールドにフォーカスしたときに画面がズームしないようにする

iOS Safariにおいて、ユーザーが入力フィールドにフォーカスすると画面が自動的にズームすることがあります。入力フィールドの文字サイズを16px以上にすることでこの挙動を抑止できます。

## レベル2 可能な限り達成

[開く 閉じる]

### [文脈に応じたフォーカス]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#contextual-focus)

#### チェック項目

##### モーダルコンテンツを開いたとき、開かれたコンテンツにフォーカスを移動する

##### モーダルコンテンツを閉じたとき、開くために使用したボタンにフォーカスを戻す

##### コンテンツを追加で読み込む操作をしたとき、読み込まれたコンテンツにフォーカスを移動する

##### ページ内リンクを模したスクロール操作をしたとき、スクロール先にフォーカスを移動する

#### 「文脈に応じたフォーカス」とは

**レベル2：可能な限り達成**

キーボードやスクリーンリーダーなどのシーケンシャルな操作体系の環境でスムーズに操作を行えるように、ユーザーの操作に応じた適切な位置にフォーカスを移動してください。

##### 参考情報

- [Dialog (Modal) Pattern](https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/) 
 ダイアログが閉じたときのフォーカス移動先について有用なガイドがあります

### [Escapeキー操作]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#escape-key)

#### チェック項目

##### Escapeキーでポップアップメニューやダイアログ、ツールチップを閉じられるようにする

#### 「Escapeキー操作」とは

**レベル2：可能な限り達成**

Escapeキーは「現在のコンテキストから抜ける」ための慣習的に用いられているキー操作です。ポップアップメニューやダイアログ、ツールチップなど、一時的に、ほかのコンテンツより前面に表示されるコンテンツをEscapeキーで閉じられるようにしてください。

### [隠されているコンテンツ]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#hidden-content)

#### チェック項目

##### 非表示コンテンツに`display: none`や`visibility: hidden`も併用する

##### `display: none`や`visibility: hidden`が指定できない場合、非表示コンテンツに`aria-hidden="true"`を指定し、非表示コンテンツが含むインタラクティブ要素に`tabindex="-1"`を指定する

#### 「隠されているコンテンツ」とは

**レベル2：可能な限り達成**

DOMツリー上には存在するものの非表示にされているコンテンツは、意図的にそうしていない限り、キーボードや支援技術からもアクセスできないようにしてください。

キーボードや支援技術からもアクセスできてしまう非表示コンテンツとは、例えば次ような方法で非表示にしたコンテンツです。

- `opacity`を`0`にする

- `overflow: hidden`と`width`や`height`、`clip`を使ってコンテンツの一部分または全部を切り取る

- `position`や`transform`などを使って画面外ないし親要素の範囲外に追いやる

### [ホバーで表示されるコンテンツ]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#content-on-hover)

#### チェック項目

##### ホバーやフォーカスで表示されるコンテンツは明示的に閉じられるまで表示し続ける

#### 「ホバーで表示されるコンテンツ」とは

**レベル2：可能な限り達成**

ホバーやフォーカスがコンテンツ表示のトリガーとなっている場合、ユーザーによって明示的に閉じられるまでそのコンテンツを表示し続けてください。トリガーからポインターやフォーカスが外れた時点でコンテンツを非表示にしたり、時限式に閉じることは避けてください。

明示的に閉じる操作とは例えば次のような操作です。

- Escapeキーが押される

- 表示されたコンテンツの中の閉じるボタンが選択される

- トリガーとコンテンツの両方からポインターが外れ、0.5秒以上が経過する

- トリガーとコンテンツとは無関係の場所がクリックされる

### [外部コンテンツおよびUIライブラリ]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#external-content-and-library)

#### チェック項目

##### iframeで埋め込まれる外部コンテンツがアクセシブルなことを確認する

##### アクセシビリティに配慮された外部UIライブラリを採用する

#### 「外部コンテンツおよびUIライブラリ」とは

**レベル2：可能な限り達成**

アクセシビリティはページ全体として評価されるため、採用している外部のUIライブラリや、iframeとして埋め込んでいる外部コンテンツもアクセシビリティに配慮したつくりになっている必要があります。

### [WAI-ARIA]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#wai-aria)

#### チェック項目

##### [APG](https://www.w3.org/WAI/ARIA/apg/)を参考に適切な役割、ステート、プロパティの値を設定する

##### APGを参考に適切なキーボードインタラクションを実装する

#### 「WAI-ARIA」とは

**レベル2：可能な限り達成**

インタラクションを含むUIはHTMLのセマンティクスに加えてWAI-ARIAを実装することでアクセシビリティを高められることがあります。

WAI-ARIAに定義された役割やステート、プロパティは、想定されていない使われ方をすると逆にアクセシビリティを損なうことがあります。使い方について不明瞭な箇所があれば、社内のエキスパートに相談してください。

## レベル3 できれば考慮

[開く 閉じる]

### [背後のコンテンツ]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#backside-content)

#### チェック項目

##### 背後に隠されたコンテンツにキーボードフォーカスを移せないようにする

##### 背後に隠されたコンテンツを支援技術からも隠す

#### 「背後のコンテンツ」とは

**レベル3：できれば考慮**

ダイアログなどのモーダルコンテンツが表示されているとき、背後に隠されたコンテンツはキーボードや支援技術からアクセスされないようにしてください。

##### 参考情報

- [focus-trap - npm](https://www.npmjs.com/package/focus-trap) 
 指定した要素の外側にフォーカスできないようにするためのライブラリ

- [wicg-inert - npm](https://www.npmjs.com/package/wicg-inert) 
 指定した要素をキーボード操作不能にし、アクセシビリティツリーからも除外する`inert`属性のためのポリフィルライブラリ

※あくまで参考であり、実装方法を指定するものではありません。

### [ダウンイベントの使用]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#down-event)

#### チェック項目

##### `mousedown`, `pointerdown`, `touchstart`を機能実行のトリガーにしない

#### 「ダウンイベントの使用」とは

**レベル3：できれば考慮**

ダウンイベント（`mousedown`, `pointerdown`, `touchstart`）を機能実行のトリガーにしていると、細かい動作が苦手なユーザーは意図せず機能を実行してしまうことがあります。かわりにアップイベント（`mouseup`, `pointerup`, `touchend`）や、`click`, `input`, `change`のような、より意図に近いイベントを用いるようにしてください。

### [ドラッグ操作の中断]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#drag-operation-interruption)

#### チェック項目

##### ドラッグ操作を中止できるようにする

#### 「ドラッグ操作の中断」とは

**レベル3：できれば考慮**

UIがドラッグアンドドロップ操作を求めるとき、ドラッグの途中で操作を中止する手段を設けてください。中止する手段の例としては次のようなものがあります。

- ドロップエリアは画面の中の一部分であり、それ以外の箇所にドロップしても何も起こらない

- ドロップ操作をした後、簡単な操作で元に戻すことができる

- ドラッグ中にEscapeキーを押すとドラッグ操作を中止できる

### [ステータスの通知]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#status-announcement)

#### チェック項目

##### ARIAライブリージョンを適切に使用し、状態変化や通知メッセージを支援技術に伝える

##### スクリーンリーダーを使用して動作検証を行う

#### 「ステータスの通知」とは

**レベル3：できれば考慮**

アプリケーションの状態変化や通知メッセージをUIに表示する場合、スクリーンリーダー等の支援技術にも同様の情報を伝える必要があります。WAI-ARIAのライブリージョンを使うことで実現可能です。

詳細: [実装 インタラクション](https://lifull.github.io/accessibility-guidelines/impl-interactions)

### 実装 マークアップ (レベル1) {#guideline-1-2}

# 実装 マークアップ

マークアップとスタイリングの実装に関するガイドラインです。

## レベル1 必ず達成

[開く 閉じる]

### [画像の代替テキスト]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#image-alternative)

#### チェック項目

##### `img`要素に代替テキストを指定するために`alt`属性を使用する

##### `img`要素を装飾画像とするために空の`alt`属性を使用する

##### `svg`要素やアイコンフォントに代替テキストを指定するために`role="img"`と`aria-label`属性を使用する

##### `svg`要素やアイコンフォントを装飾画像とするために`aria-hidden="true"`を使用する

##### イメージマップの`area`要素に代替テキストを指定するために`alt`属性を使用する

#### 「画像の代替テキスト」とは

**レベル1：必ず達成**

画像やアイコンなどの非テキストコンテンツには、適した手段で代替テキストを指定してください。

##### 具体例① 意味のある画像

*alt属性を使用する意味のあるimg要素に代替テキストを指定するためにalt属性を使用する。*

*role="img"とaria-label属性を使用するsvg要素に代替テキストを指定するためにrole="img"とaria-label属性を使用する。*

*role="img"とaria-label属性を使用するアイコンが描画される要素に代替テキストを指定するためにrole="img"とaria-label属性を使用する。*

##### 具体例② 装飾的な画像

*空のalt属性を使用するimg要素を装飾画像とするために空のalt属性を使用する。alt属性値そのものを省略すると、環境によって読み上げられ方が定まらない。*

*aria-hidden="true"を使用するsvg要素やアイコンフォントを装飾画像とするためにaria-hidden="true"を使用する。*

##### 具体例③ イメージマップ

*area要素にalt属性を使用するイメージマップのarea要素に代替テキストを指定するためにalt属性を使用する。*

##### 前工程で代替テキストが指定されなかった場合の対応

代替テキストはコンテンツの一部であるため、コンテンツ設計やデザインの段階で決められることが理想です。実装段階で代替テキストが決定していない場合、代替テキスト案を書き、コンテンツオーナーと相談してください。

- [altディシジョンツリー](https://www.w3.org/WAI/tutorials/images/decision-tree/ja)に沿って画像のタイプを判別する

- 画像が装飾的な画像ではない場合、[代替テキストの考え方](/accessibility-guidelines/alternative-text.html)を参考に代替テキスト案を書き、コンテンツオーナーと相談する

- 画像が複雑な情報を含みかつ本文やキャプションに同等の情報が含まれていなかったら、本文やキャプションに説明テキストを表示できないかどうかコンテンツオーナーと相談する

### [背景画像]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#background-image)

#### チェック項目

##### 情報を伝えている画像には`img`要素を使い、代替テキストを設定する

#### 「背景画像」とは

**レベル1：必ず達成**

情報を伝えている画像を CSS で背景画像として設定すると、テキストから情報を得ているユーザーに情報が伝わらなくなってしまいます。背景画像には代替テキストが設定できません。また背景画像は印刷に表示されません。

### [ページタイトル]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#page-title)

#### チェック項目

##### 設計資料に記載されたタイトルを`title`要素に指定する

##### 設計資料にタイトルが記載されていない場合、サイト内で一意になるタイトル案を作成し、コンテンツオーナーと相談する

#### 「ページタイトル」とは

**レベル1：必ず達成**

ページタイトルはブラウザーのタブや検索結果に表示されたり、スクリーンリーダーによって読み上げられます。ページの内容を把握するための重要な手がかりとしてページタイトルは重要です。

### [見出し]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#heading)

#### チェック項目

##### 設計資料に従い、階層構造の深さに応じた見出し要素（`h1`～`h6`）を使って見出しをマークアップする

#### 「見出し」とは

**レベル1：必ず達成**

ページの情報構造を見出しを使って整理すると、ユーザーが情報を素早く把握できるようになります。特に、スクリーンリーダーの利用者は見出しを拾い読み※することでページの全体構造を把握しています。

##### 参考情報

- ※[スクリーンリーダーによる見出しの拾い読みのデモ](https://www.youtube.com/watch?v=fcLpufoZyx8&t=338s)

### [ページの言語]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#language-of-page)

#### チェック項目

##### `html`要素に`lang`属性を使ってページ言語を明示する

##### 部分的に別の言語のテキストが挿入される場合、その部分を囲む要素に`lang`属性を使って言語を明示する

#### 「ページの言語」とは

**レベル1：必ず達成**

lang 属性を使うとページの全体や一部分に対して書かれている言語を明示することができます。機械がこれを読み取ることでテキストを適切に処理できるようになります。

## レベル2 可能な限り達成

[開く 閉じる]

### [グループ化された画像]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#grouped-images)

#### チェック項目

##### グループ化された画像に代替テキストを設定する

#### 「グループ化された画像」とは

**レベル2：可能な限り達成**

複数の画像の並びがひとまとまりの情報を表現する場合、個別の画像に代替テキストを設定すると理解が難しくなる場合があります。

##### 具体例①：評価メーター

*個別の画像に代替テキストを設定する連続して読み上げると「星1星1星1星0.5」となり、伝えたい情報が伝わらない。*

*先頭の画像に代替テキストを設定する先頭の画像に数値の情報をまとめて設定し、残りの画像には空の文字列を設定する（＝装飾画像とする）ことで、数値の情報を伝えられる。*

*画像の並びをひとまとまりの画像として扱うrole="img"属性を使用し、その要素をひとまとまりの画像として扱う。*

### [意味のある順序]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#meaningful-sequence)

#### チェック項目

##### 意味の通る順序でコンテンツをマークアップし、スタイルシートでレイアウトする

#### 「意味のある順序」とは

**レベル2：可能な限り達成**

スクリーンリーダー等の支援技術は、DOM上の要素順に従ってコンテンツを読み上げます。スタイルシートやスクリプトを使ってレイアウトを調整していると、視覚的な順序と意味順序、読み上げの順序がバラバラになってしまうことがあり、混乱を招くかもしれません。

原則として、スタイルシートを無効化しても意味の通る順序でマークアップし、スタイルシートでレイアウトを実現するようにしてください。これによって視覚的な順序と読み上げの順序が一致しなくなり、支援技術による利用が著しく阻害されると思われる場合、デザイナーと話し合ってみてください。

### [ランドマーク領域]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#landmark-region)

#### チェック項目

##### サイト共通ヘッダーを`header`要素を使ってマークアップする

##### サイト共通フッターを`footer`要素を使ってマークアップする

##### ヘッダー、フッターを除く領域を`main`要素を使ってマークアップする

##### パンくずナビゲーションを`nav`要素を使ってマークアップする

#### 「ランドマーク領域」とは

**レベル2：可能な限り達成**

ページの主たる領域をランドマークとしてマークアップすると、スクリーンリーダー利用者の使い勝手を向上させることができます。

### [改行と空白文字]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#whitespace-character)

#### チェック項目

##### 単語内の文字間隔を制御するために、CSS の`letter-spacing`を使用する

#### 「改行と空白文字」とは

**レベル2：可能な限り達成**

ゆったりとした文字間隔を実現するためにスペース文字を文字間に挿入すると、スクリーンリーダーは語句を適切に検出できなくなり、うまく読み上げられなくなってしまいます。

### [調整可能な文字サイズ]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#adjustable-text-size)

#### チェック項目

##### ユーザー設定を反映できるようにルート要素への相対（rem）単位で文字サイズを指定する

#### 「調整可能な文字サイズ」とは

**レベル2：可能な限り達成**

ユーザーの視力や認知特性に合わせるために、ブラウザーのデフォルトの文字サイズを大きく設定しているユーザーがいます。ウェブサイトが文字サイズをpx単位で指定していると、ブラウザーの文字サイズの設定が無視されてしまいます。

##### 参考情報

- [拡大表示時のアクセシビリティー — freeeアクセシビリティー・ガイドライン](https://a11y-guidelines.freee.co.jp/explanations/magnification.html)

- [Pixels vs. Ems: Users DO Change Font Size | by Evan Minto | Medium](https://medium.com/@vamptvo/pixels-vs-ems-users-do-change-font-size-5cfb20831773)

## レベル3 できれば考慮

[開く 閉じる]

### [正しい構文と文法]

[![ガイドライン項目へのリンク](/accessibility-guidelines/assets/link.921fd04c.svg)](#syntax-and-grammar)

#### チェック項目

##### 仕様に準拠したHTMLやCSSを記述する

##### HTMLの構文と文法をチェックするために[Nu Html Checker](https://validator.w3.org/nu/)を使用する

##### CSSの構文と文法をチェックするために[The W3C CSS Validation Service](https://jigsaw.w3.org/css-validator/)を使用する

#### 「正しい構文と文法」とは

**レベル3：できれば考慮**

仕様に定められた構文と文法に準拠して HTML や CSS を記述することで、将来のウェブ技術の拡張や新しいユーザーエージェントに対して堅牢になります。

詳細: [実装 マークアップ](https://lifull.github.io/accessibility-guidelines/impl-markup)

